(() => {
  // src/shared/lt-plex-auth.user.js
  (function() {
    const STORAGE_KEY = "PlexApiKey";
    function normalize(raw) {
      if (!raw) return "";
      if (/^(Basic|Bearer)\s/i.test(raw)) return raw.trim();
      return `Basic ${btoa(raw.trim())}`;
    }
    async function save(raw) {
      await GM_setValue(STORAGE_KEY, raw);
      try {
        localStorage.setItem(STORAGE_KEY, raw);
      } catch {
      }
    }
    function getKey() {
      let raw = GM_getValue(STORAGE_KEY, "");
      if (raw) return normalize(raw);
      try {
        const ls = localStorage.getItem(STORAGE_KEY) || "";
        if (ls) {
          GM_setValue(STORAGE_KEY, ls);
          return normalize(ls);
        }
      } catch {
      }
      return "";
    }
    async function setKey() {
      const input = prompt('Enter Plex credentials as "username:password", or paste a full "Basic <base64>" token:');
      if (!input) return;
      const norm = normalize(input);
      await save(norm);
      alert("\u{1F510} Plex API Key saved");
    }
    async function clearKey() {
      await GM_setValue(STORAGE_KEY, "");
      try {
        localStorage.removeItem(STORAGE_KEY);
      } catch {
      }
      alert("\u{1F510} Plex API Key cleared");
    }
    const api = { getKey, setKey, clearKey };
    window.PlexAPI = api;
    window.PlexAuth = api;
    try {
      unsafeWindow.PlexAuth = api;
    } catch {
    }
    if (typeof GM_registerMenuCommand === "function") {
      GM_registerMenuCommand("\u2699\uFE0F Set Plex API Key", setKey);
      GM_registerMenuCommand("\u{1F9F9} Clear Plex API Key", clearKey);
    }
  })();
})();
;(function(g){try{if(typeof LTPlexAuth!=='undefined'){g.LTPlexAuth=LTPlexAuth;}}catch(e){}})(typeof unsafeWindow!=='undefined'?unsafeWindow:window);
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vdG0tc2NyaXB0cy9zcmMvc2hhcmVkL2x0LXBsZXgtYXV0aC51c2VyLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyA9PVVzZXJTY3JpcHQ9PVxuLy8gQG5hbWUgICAgICAgICBMVCBcdTIwM0EgUGxleCBBdXRoIEhlbHBlclxuLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vQWxwaGFHZWVrNTA5L3BsZXgtdGFtcGVybW9ua2V5LXNjcmlwdHNcbi8vIEB2ZXJzaW9uICAgICAgMy44LjM3XG4vLyBAZGVzY3JpcHRpb24gIFNoYXJlZCBoZWxwZXIgZm9yIHN0b3JpbmcgYW5kIHJldHJpZXZpbmcgUGxleCBBUEkga2V5XG4vLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vKi5vbi5wbGV4LmNvbS8qXG4vLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vKi5wbGV4LmNvbS8qXG4vLyBAZ3JhbnQgICAgICAgIEdNX2dldFZhbHVlXG4vLyBAZ3JhbnQgICAgICAgIEdNX3NldFZhbHVlXG4vLyBAZ3JhbnQgICAgICAgIEdNX3JlZ2lzdGVyTWVudUNvbW1hbmRcbi8vID09L1VzZXJTY3JpcHQ9PVxuXG4oZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IFNUT1JBR0VfS0VZID0gJ1BsZXhBcGlLZXknO1xuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplKHJhdykge1xuICAgICAgICBpZiAoIXJhdykgcmV0dXJuICcnO1xuICAgICAgICAvLyBBY2NlcHQgXCJ1c2VyOnBhc3NcIiwgXCJCYXNpYyAuLi4uXCIsIG9yIFwiQmVhcmVyIC4uLi5cIlxuICAgICAgICBpZiAoL14oQmFzaWN8QmVhcmVyKVxccy9pLnRlc3QocmF3KSkgcmV0dXJuIHJhdy50cmltKCk7XG4gICAgICAgIHJldHVybiBgQmFzaWMgJHtidG9hKHJhdy50cmltKCkpfWA7XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gc2F2ZShyYXcpIHtcbiAgICAgICAgYXdhaXQgR01fc2V0VmFsdWUoU1RPUkFHRV9LRVksIHJhdyk7XG4gICAgICAgIHRyeSB7IGxvY2FsU3RvcmFnZS5zZXRJdGVtKFNUT1JBR0VfS0VZLCByYXcpOyB9IGNhdGNoIHsgfVxuICAgIH1cblxuICAgIC8vIFx1MjcwNSBOZXZlciBwcm9tcHRzLiBSZXR1cm5zIHN0cmluZyBvciAnJy5cbiAgICBmdW5jdGlvbiBnZXRLZXkoKSB7XG4gICAgICAgIC8vIDEpIEdNIHN0b3JlIChhdXRob3JpdGF0aXZlKVxuICAgICAgICBsZXQgcmF3ID0gR01fZ2V0VmFsdWUoU1RPUkFHRV9LRVksICcnKTtcbiAgICAgICAgaWYgKHJhdykgcmV0dXJuIG5vcm1hbGl6ZShyYXcpO1xuXG4gICAgICAgIC8vIDIpIE1pZ3JhdGUgZnJvbSBsb2NhbFN0b3JhZ2UgKG9sZGVyIHNjcmlwdHMpIGlmIGF2YWlsYWJsZVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgbHMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShTVE9SQUdFX0tFWSkgfHwgJyc7XG4gICAgICAgICAgICBpZiAobHMpIHtcbiAgICAgICAgICAgICAgICAvLyBzaWxlbnQgbWlncmF0aW9uIHRvIEdNIHN0b3JlXG4gICAgICAgICAgICAgICAgR01fc2V0VmFsdWUoU1RPUkFHRV9LRVksIGxzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9ybWFsaXplKGxzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCB7IH1cblxuICAgICAgICByZXR1cm4gJyc7IC8vIG5vIGF1dG8tcHJvbXB0XG4gICAgfVxuXG4gICAgLy8gUHJvbXB0IG9ubHkgd2hlbiB1c2VyIGFza3MgZnJvbSB0aGUgbWVudVxuICAgIGFzeW5jIGZ1bmN0aW9uIHNldEtleSgpIHtcbiAgICAgICAgY29uc3QgaW5wdXQgPSBwcm9tcHQoJ0VudGVyIFBsZXggY3JlZGVudGlhbHMgYXMgXCJ1c2VybmFtZTpwYXNzd29yZFwiLCBvciBwYXN0ZSBhIGZ1bGwgXCJCYXNpYyA8YmFzZTY0PlwiIHRva2VuOicpO1xuICAgICAgICBpZiAoIWlucHV0KSByZXR1cm47XG4gICAgICAgIGNvbnN0IG5vcm0gPSBub3JtYWxpemUoaW5wdXQpO1xuICAgICAgICBhd2FpdCBzYXZlKG5vcm0pO1xuICAgICAgICBhbGVydCgnXHVEODNEXHVERDEwIFBsZXggQVBJIEtleSBzYXZlZCcpO1xuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIGNsZWFyS2V5KCkge1xuICAgICAgICBhd2FpdCBHTV9zZXRWYWx1ZShTVE9SQUdFX0tFWSwgJycpO1xuICAgICAgICB0cnkgeyBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShTVE9SQUdFX0tFWSk7IH0gY2F0Y2ggeyB9XG4gICAgICAgIGFsZXJ0KCdcdUQ4M0RcdUREMTAgUGxleCBBUEkgS2V5IGNsZWFyZWQnKTtcbiAgICB9XG5cbiAgICAvLyBFeHBvc2UgQVBJIChiYWNrLWNvbXBhdCArIG5ldyBhbGlhcylcbiAgICBjb25zdCBhcGkgPSB7IGdldEtleSwgc2V0S2V5LCBjbGVhcktleSB9O1xuICAgIHdpbmRvdy5QbGV4QVBJID0gYXBpO1xuICAgIHdpbmRvdy5QbGV4QXV0aCA9IGFwaTtcbiAgICB0cnkgeyB1bnNhZmVXaW5kb3cuUGxleEF1dGggPSBhcGk7IH0gY2F0Y2ggeyB9XG5cbiAgICBpZiAodHlwZW9mIEdNX3JlZ2lzdGVyTWVudUNvbW1hbmQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgR01fcmVnaXN0ZXJNZW51Q29tbWFuZCgnXHUyNjk5XHVGRTBGIFNldCBQbGV4IEFQSSBLZXknLCBzZXRLZXkpO1xuICAgICAgICBHTV9yZWdpc3Rlck1lbnVDb21tYW5kKCdcdUQ4M0VcdURERjkgQ2xlYXIgUGxleCBBUEkgS2V5JywgY2xlYXJLZXkpO1xuICAgIH1cbn0pKCk7Il0sCiAgIm1hcHBpbmdzIjogIjs7QUFZQSxHQUFDLFdBQVk7QUFDVCxVQUFNLGNBQWM7QUFFcEIsYUFBUyxVQUFVLEtBQUs7QUFDcEIsVUFBSSxDQUFDLElBQUssUUFBTztBQUVqQixVQUFJLHFCQUFxQixLQUFLLEdBQUcsRUFBRyxRQUFPLElBQUksS0FBSztBQUNwRCxhQUFPLFNBQVMsS0FBSyxJQUFJLEtBQUssQ0FBQyxDQUFDO0FBQUEsSUFDcEM7QUFFQSxtQkFBZSxLQUFLLEtBQUs7QUFDckIsWUFBTSxZQUFZLGFBQWEsR0FBRztBQUNsQyxVQUFJO0FBQUUscUJBQWEsUUFBUSxhQUFhLEdBQUc7QUFBQSxNQUFHLFFBQVE7QUFBQSxNQUFFO0FBQUEsSUFDNUQ7QUFHQSxhQUFTLFNBQVM7QUFFZCxVQUFJLE1BQU0sWUFBWSxhQUFhLEVBQUU7QUFDckMsVUFBSSxJQUFLLFFBQU8sVUFBVSxHQUFHO0FBRzdCLFVBQUk7QUFDQSxjQUFNLEtBQUssYUFBYSxRQUFRLFdBQVcsS0FBSztBQUNoRCxZQUFJLElBQUk7QUFFSixzQkFBWSxhQUFhLEVBQUU7QUFDM0IsaUJBQU8sVUFBVSxFQUFFO0FBQUEsUUFDdkI7QUFBQSxNQUNKLFFBQVE7QUFBQSxNQUFFO0FBRVYsYUFBTztBQUFBLElBQ1g7QUFHQSxtQkFBZSxTQUFTO0FBQ3BCLFlBQU0sUUFBUSxPQUFPLHdGQUF3RjtBQUM3RyxVQUFJLENBQUMsTUFBTztBQUNaLFlBQU0sT0FBTyxVQUFVLEtBQUs7QUFDNUIsWUFBTSxLQUFLLElBQUk7QUFDZixZQUFNLDhCQUF1QjtBQUFBLElBQ2pDO0FBRUEsbUJBQWUsV0FBVztBQUN0QixZQUFNLFlBQVksYUFBYSxFQUFFO0FBQ2pDLFVBQUk7QUFBRSxxQkFBYSxXQUFXLFdBQVc7QUFBQSxNQUFHLFFBQVE7QUFBQSxNQUFFO0FBQ3RELFlBQU0sZ0NBQXlCO0FBQUEsSUFDbkM7QUFHQSxVQUFNLE1BQU0sRUFBRSxRQUFRLFFBQVEsU0FBUztBQUN2QyxXQUFPLFVBQVU7QUFDakIsV0FBTyxXQUFXO0FBQ2xCLFFBQUk7QUFBRSxtQkFBYSxXQUFXO0FBQUEsSUFBSyxRQUFRO0FBQUEsSUFBRTtBQUU3QyxRQUFJLE9BQU8sMkJBQTJCLFlBQVk7QUFDOUMsNkJBQXVCLGlDQUF1QixNQUFNO0FBQ3BELDZCQUF1QixnQ0FBeUIsUUFBUTtBQUFBLElBQzVEO0FBQUEsRUFDSixHQUFHOyIsCiAgIm5hbWVzIjogW10KfQo=
