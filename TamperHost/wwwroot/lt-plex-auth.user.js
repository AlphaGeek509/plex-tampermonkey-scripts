(() => {
  // src/shared/lt-plex-auth.user.js
  (function() {
    const STORAGE_KEY = "PlexApiKey";
    function normalize(raw) {
      if (!raw) return "";
      if (/^(Basic|Bearer)\s/i.test(raw)) return raw.trim();
      return `Basic ${btoa(raw.trim())}`;
    }
    async function save(raw) {
      await GM_setValue(STORAGE_KEY, raw);
      try {
        localStorage.setItem(STORAGE_KEY, raw);
      } catch {
      }
    }
    function getKey() {
      let raw = GM_getValue(STORAGE_KEY, "");
      if (raw) return normalize(raw);
      try {
        const ls = localStorage.getItem(STORAGE_KEY) || "";
        if (ls) {
          GM_setValue(STORAGE_KEY, ls);
          return normalize(ls);
        }
      } catch {
      }
      return "";
    }
    async function setKey() {
      const input = prompt('Enter Plex credentials as "username:password", or paste a full "Basic <base64>" token:');
      if (!input) return;
      const norm = normalize(input);
      await save(norm);
      alert("\u{1F510} Plex API Key saved");
    }
    async function clearKey() {
      await GM_setValue(STORAGE_KEY, "");
      try {
        localStorage.removeItem(STORAGE_KEY);
      } catch {
      }
      alert("\u{1F510} Plex API Key cleared");
    }
    const api = { getKey, setKey, clearKey };
    window.PlexAPI = api;
    window.PlexAuth = api;
    try {
      unsafeWindow.PlexAuth = api;
    } catch {
    }
    if (typeof GM_registerMenuCommand === "function") {
      GM_registerMenuCommand("\u2699\uFE0F Set Plex API Key", setKey);
      GM_registerMenuCommand("\u{1F9F9} Clear Plex API Key", clearKey);
    }
  })();
})();
;(function(g){try{if(typeof LTPlexAuth!=='undefined'){g.LTPlexAuth=LTPlexAuth;}}catch(e){}})(typeof unsafeWindow!=='undefined'?unsafeWindow:window);
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vdG0tc2NyaXB0cy9zcmMvc2hhcmVkL2x0LXBsZXgtYXV0aC51c2VyLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyA9PVVzZXJTY3JpcHQ9PVxuLy8gQG5hbWUgICAgICAgICBMVCBcdTIwM0EgUGxleCBBdXRoIEhlbHBlclxuLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vQWxwaGFHZWVrNTA5L3BsZXgtdGFtcGVybW9ua2V5LXNjcmlwdHNcbi8vIEB2ZXJzaW9uICAgICAgNC4yLjJcbi8vIEBkZXNjcmlwdGlvbiAgU2hhcmVkIGhlbHBlciBmb3Igc3RvcmluZyBhbmQgcmV0cmlldmluZyBQbGV4IEFQSSBrZXlcbi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly8qLm9uLnBsZXguY29tLypcbi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly8qLnBsZXguY29tLypcbi8vIEBncmFudCAgICAgICAgR01fZ2V0VmFsdWVcbi8vIEBncmFudCAgICAgICAgR01fc2V0VmFsdWVcbi8vIEBncmFudCAgICAgICAgR01fcmVnaXN0ZXJNZW51Q29tbWFuZFxuLy8gPT0vVXNlclNjcmlwdD09XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgU1RPUkFHRV9LRVkgPSAnUGxleEFwaUtleSc7XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemUocmF3KSB7XG4gICAgICAgIGlmICghcmF3KSByZXR1cm4gJyc7XG4gICAgICAgIC8vIEFjY2VwdCBcInVzZXI6cGFzc1wiLCBcIkJhc2ljIC4uLi5cIiwgb3IgXCJCZWFyZXIgLi4uLlwiXG4gICAgICAgIGlmICgvXihCYXNpY3xCZWFyZXIpXFxzL2kudGVzdChyYXcpKSByZXR1cm4gcmF3LnRyaW0oKTtcbiAgICAgICAgcmV0dXJuIGBCYXNpYyAke2J0b2EocmF3LnRyaW0oKSl9YDtcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBzYXZlKHJhdykge1xuICAgICAgICBhd2FpdCBHTV9zZXRWYWx1ZShTVE9SQUdFX0tFWSwgcmF3KTtcbiAgICAgICAgdHJ5IHsgbG9jYWxTdG9yYWdlLnNldEl0ZW0oU1RPUkFHRV9LRVksIHJhdyk7IH0gY2F0Y2ggeyB9XG4gICAgfVxuXG4gICAgLy8gXHUyNzA1IE5ldmVyIHByb21wdHMuIFJldHVybnMgc3RyaW5nIG9yICcnLlxuICAgIGZ1bmN0aW9uIGdldEtleSgpIHtcbiAgICAgICAgLy8gMSkgR00gc3RvcmUgKGF1dGhvcml0YXRpdmUpXG4gICAgICAgIGxldCByYXcgPSBHTV9nZXRWYWx1ZShTVE9SQUdFX0tFWSwgJycpO1xuICAgICAgICBpZiAocmF3KSByZXR1cm4gbm9ybWFsaXplKHJhdyk7XG5cbiAgICAgICAgLy8gMikgTWlncmF0ZSBmcm9tIGxvY2FsU3RvcmFnZSAob2xkZXIgc2NyaXB0cykgaWYgYXZhaWxhYmxlXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBscyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFNUT1JBR0VfS0VZKSB8fCAnJztcbiAgICAgICAgICAgIGlmIChscykge1xuICAgICAgICAgICAgICAgIC8vIHNpbGVudCBtaWdyYXRpb24gdG8gR00gc3RvcmVcbiAgICAgICAgICAgICAgICBHTV9zZXRWYWx1ZShTVE9SQUdFX0tFWSwgbHMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBub3JtYWxpemUobHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIHsgfVxuXG4gICAgICAgIHJldHVybiAnJzsgLy8gbm8gYXV0by1wcm9tcHRcbiAgICB9XG5cbiAgICAvLyBQcm9tcHQgb25seSB3aGVuIHVzZXIgYXNrcyBmcm9tIHRoZSBtZW51XG4gICAgYXN5bmMgZnVuY3Rpb24gc2V0S2V5KCkge1xuICAgICAgICBjb25zdCBpbnB1dCA9IHByb21wdCgnRW50ZXIgUGxleCBjcmVkZW50aWFscyBhcyBcInVzZXJuYW1lOnBhc3N3b3JkXCIsIG9yIHBhc3RlIGEgZnVsbCBcIkJhc2ljIDxiYXNlNjQ+XCIgdG9rZW46Jyk7XG4gICAgICAgIGlmICghaW5wdXQpIHJldHVybjtcbiAgICAgICAgY29uc3Qgbm9ybSA9IG5vcm1hbGl6ZShpbnB1dCk7XG4gICAgICAgIGF3YWl0IHNhdmUobm9ybSk7XG4gICAgICAgIGFsZXJ0KCdcdUQ4M0RcdUREMTAgUGxleCBBUEkgS2V5IHNhdmVkJyk7XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gY2xlYXJLZXkoKSB7XG4gICAgICAgIGF3YWl0IEdNX3NldFZhbHVlKFNUT1JBR0VfS0VZLCAnJyk7XG4gICAgICAgIHRyeSB7IGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFNUT1JBR0VfS0VZKTsgfSBjYXRjaCB7IH1cbiAgICAgICAgYWxlcnQoJ1x1RDgzRFx1REQxMCBQbGV4IEFQSSBLZXkgY2xlYXJlZCcpO1xuICAgIH1cblxuICAgIC8vIEV4cG9zZSBBUEkgKGJhY2stY29tcGF0ICsgbmV3IGFsaWFzKVxuICAgIGNvbnN0IGFwaSA9IHsgZ2V0S2V5LCBzZXRLZXksIGNsZWFyS2V5IH07XG4gICAgd2luZG93LlBsZXhBUEkgPSBhcGk7XG4gICAgd2luZG93LlBsZXhBdXRoID0gYXBpO1xuICAgIHRyeSB7IHVuc2FmZVdpbmRvdy5QbGV4QXV0aCA9IGFwaTsgfSBjYXRjaCB7IH1cblxuICAgIGlmICh0eXBlb2YgR01fcmVnaXN0ZXJNZW51Q29tbWFuZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBHTV9yZWdpc3Rlck1lbnVDb21tYW5kKCdcdTI2OTlcdUZFMEYgU2V0IFBsZXggQVBJIEtleScsIHNldEtleSk7XG4gICAgICAgIEdNX3JlZ2lzdGVyTWVudUNvbW1hbmQoJ1x1RDgzRVx1RERGOSBDbGVhciBQbGV4IEFQSSBLZXknLCBjbGVhcktleSk7XG4gICAgfVxufSkoKTsiXSwKICAibWFwcGluZ3MiOiAiOztBQVlBLEdBQUMsV0FBWTtBQUNULFVBQU0sY0FBYztBQUVwQixhQUFTLFVBQVUsS0FBSztBQUNwQixVQUFJLENBQUMsSUFBSyxRQUFPO0FBRWpCLFVBQUkscUJBQXFCLEtBQUssR0FBRyxFQUFHLFFBQU8sSUFBSSxLQUFLO0FBQ3BELGFBQU8sU0FBUyxLQUFLLElBQUksS0FBSyxDQUFDLENBQUM7QUFBQSxJQUNwQztBQUVBLG1CQUFlLEtBQUssS0FBSztBQUNyQixZQUFNLFlBQVksYUFBYSxHQUFHO0FBQ2xDLFVBQUk7QUFBRSxxQkFBYSxRQUFRLGFBQWEsR0FBRztBQUFBLE1BQUcsUUFBUTtBQUFBLE1BQUU7QUFBQSxJQUM1RDtBQUdBLGFBQVMsU0FBUztBQUVkLFVBQUksTUFBTSxZQUFZLGFBQWEsRUFBRTtBQUNyQyxVQUFJLElBQUssUUFBTyxVQUFVLEdBQUc7QUFHN0IsVUFBSTtBQUNBLGNBQU0sS0FBSyxhQUFhLFFBQVEsV0FBVyxLQUFLO0FBQ2hELFlBQUksSUFBSTtBQUVKLHNCQUFZLGFBQWEsRUFBRTtBQUMzQixpQkFBTyxVQUFVLEVBQUU7QUFBQSxRQUN2QjtBQUFBLE1BQ0osUUFBUTtBQUFBLE1BQUU7QUFFVixhQUFPO0FBQUEsSUFDWDtBQUdBLG1CQUFlLFNBQVM7QUFDcEIsWUFBTSxRQUFRLE9BQU8sd0ZBQXdGO0FBQzdHLFVBQUksQ0FBQyxNQUFPO0FBQ1osWUFBTSxPQUFPLFVBQVUsS0FBSztBQUM1QixZQUFNLEtBQUssSUFBSTtBQUNmLFlBQU0sOEJBQXVCO0FBQUEsSUFDakM7QUFFQSxtQkFBZSxXQUFXO0FBQ3RCLFlBQU0sWUFBWSxhQUFhLEVBQUU7QUFDakMsVUFBSTtBQUFFLHFCQUFhLFdBQVcsV0FBVztBQUFBLE1BQUcsUUFBUTtBQUFBLE1BQUU7QUFDdEQsWUFBTSxnQ0FBeUI7QUFBQSxJQUNuQztBQUdBLFVBQU0sTUFBTSxFQUFFLFFBQVEsUUFBUSxTQUFTO0FBQ3ZDLFdBQU8sVUFBVTtBQUNqQixXQUFPLFdBQVc7QUFDbEIsUUFBSTtBQUFFLG1CQUFhLFdBQVc7QUFBQSxJQUFLLFFBQVE7QUFBQSxJQUFFO0FBRTdDLFFBQUksT0FBTywyQkFBMkIsWUFBWTtBQUM5Qyw2QkFBdUIsaUNBQXVCLE1BQU07QUFDcEQsNkJBQXVCLGdDQUF5QixRQUFRO0FBQUEsSUFDNUQ7QUFBQSxFQUNKLEdBQUc7IiwKICAibmFtZXMiOiBbXQp9Cg==
