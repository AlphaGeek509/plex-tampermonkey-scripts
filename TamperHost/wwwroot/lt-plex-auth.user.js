(() => {
  // src/shared/lt-plex-auth.user.js
  (function() {
    const STORAGE_KEY = "PlexApiKey";
    function normalize(raw) {
      if (!raw) return "";
      if (/^(Basic|Bearer)\s/i.test(raw)) return raw.trim();
      return `Basic ${btoa(raw.trim())}`;
    }
    async function save(raw) {
      await GM_setValue(STORAGE_KEY, raw);
      try {
        localStorage.setItem(STORAGE_KEY, raw);
      } catch {
      }
    }
    function getKey() {
      let raw = GM_getValue(STORAGE_KEY, "");
      if (raw) return normalize(raw);
      try {
        const ls = localStorage.getItem(STORAGE_KEY) || "";
        if (ls) {
          GM_setValue(STORAGE_KEY, ls);
          return normalize(ls);
        }
      } catch {
      }
      return "";
    }
    async function setKey() {
      const input = prompt('Enter Plex credentials as "username:password", or paste a full "Basic <base64>" token:');
      if (!input) return;
      const norm = normalize(input);
      await save(norm);
      alert("\u{1F510} Plex API Key saved");
    }
    async function clearKey() {
      await GM_setValue(STORAGE_KEY, "");
      try {
        localStorage.removeItem(STORAGE_KEY);
      } catch {
      }
      alert("\u{1F510} Plex API Key cleared");
    }
    const api = { getKey, setKey, clearKey };
    window.PlexAPI = api;
    window.PlexAuth = api;
    try {
      unsafeWindow.PlexAuth = api;
    } catch {
    }
    if (typeof GM_registerMenuCommand === "function") {
      GM_registerMenuCommand("\u2699\uFE0F Set Plex API Key", setKey);
      GM_registerMenuCommand("\u{1F9F9} Clear Plex API Key", clearKey);
    }
  })();
})();
;(function(g){try{if(typeof LTPlexAuth!=='undefined'){g.LTPlexAuth=LTPlexAuth;}}catch(e){}})(typeof unsafeWindow!=='undefined'?unsafeWindow:window);
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vdG0tc2NyaXB0cy9zcmMvc2hhcmVkL2x0LXBsZXgtYXV0aC51c2VyLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyA9PVVzZXJTY3JpcHQ9PVxuLy8gQG5hbWUgICAgICAgICBMVCBcdTIwM0EgUGxleCBBdXRoIEhlbHBlclxuLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vQWxwaGFHZWVrNTA5L3BsZXgtdGFtcGVybW9ua2V5LXNjcmlwdHNcbi8vIEB2ZXJzaW9uICAgICAgMy44LjEyN1xuLy8gQGRlc2NyaXB0aW9uICBTaGFyZWQgaGVscGVyIGZvciBzdG9yaW5nIGFuZCByZXRyaWV2aW5nIFBsZXggQVBJIGtleVxuLy8gQG1hdGNoICAgICAgICBodHRwczovLyoub24ucGxleC5jb20vKlxuLy8gQG1hdGNoICAgICAgICBodHRwczovLyoucGxleC5jb20vKlxuLy8gQGdyYW50ICAgICAgICBHTV9nZXRWYWx1ZVxuLy8gQGdyYW50ICAgICAgICBHTV9zZXRWYWx1ZVxuLy8gQGdyYW50ICAgICAgICBHTV9yZWdpc3Rlck1lbnVDb21tYW5kXG4vLyA9PS9Vc2VyU2NyaXB0PT1cblxuKGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBTVE9SQUdFX0tFWSA9ICdQbGV4QXBpS2V5JztcblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZShyYXcpIHtcbiAgICAgICAgaWYgKCFyYXcpIHJldHVybiAnJztcbiAgICAgICAgLy8gQWNjZXB0IFwidXNlcjpwYXNzXCIsIFwiQmFzaWMgLi4uLlwiLCBvciBcIkJlYXJlciAuLi4uXCJcbiAgICAgICAgaWYgKC9eKEJhc2ljfEJlYXJlcilcXHMvaS50ZXN0KHJhdykpIHJldHVybiByYXcudHJpbSgpO1xuICAgICAgICByZXR1cm4gYEJhc2ljICR7YnRvYShyYXcudHJpbSgpKX1gO1xuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIHNhdmUocmF3KSB7XG4gICAgICAgIGF3YWl0IEdNX3NldFZhbHVlKFNUT1JBR0VfS0VZLCByYXcpO1xuICAgICAgICB0cnkgeyBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShTVE9SQUdFX0tFWSwgcmF3KTsgfSBjYXRjaCB7IH1cbiAgICB9XG5cbiAgICAvLyBcdTI3MDUgTmV2ZXIgcHJvbXB0cy4gUmV0dXJucyBzdHJpbmcgb3IgJycuXG4gICAgZnVuY3Rpb24gZ2V0S2V5KCkge1xuICAgICAgICAvLyAxKSBHTSBzdG9yZSAoYXV0aG9yaXRhdGl2ZSlcbiAgICAgICAgbGV0IHJhdyA9IEdNX2dldFZhbHVlKFNUT1JBR0VfS0VZLCAnJyk7XG4gICAgICAgIGlmIChyYXcpIHJldHVybiBub3JtYWxpemUocmF3KTtcblxuICAgICAgICAvLyAyKSBNaWdyYXRlIGZyb20gbG9jYWxTdG9yYWdlIChvbGRlciBzY3JpcHRzKSBpZiBhdmFpbGFibGVcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGxzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oU1RPUkFHRV9LRVkpIHx8ICcnO1xuICAgICAgICAgICAgaWYgKGxzKSB7XG4gICAgICAgICAgICAgICAgLy8gc2lsZW50IG1pZ3JhdGlvbiB0byBHTSBzdG9yZVxuICAgICAgICAgICAgICAgIEdNX3NldFZhbHVlKFNUT1JBR0VfS0VZLCBscyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZShscyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggeyB9XG5cbiAgICAgICAgcmV0dXJuICcnOyAvLyBubyBhdXRvLXByb21wdFxuICAgIH1cblxuICAgIC8vIFByb21wdCBvbmx5IHdoZW4gdXNlciBhc2tzIGZyb20gdGhlIG1lbnVcbiAgICBhc3luYyBmdW5jdGlvbiBzZXRLZXkoKSB7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gcHJvbXB0KCdFbnRlciBQbGV4IGNyZWRlbnRpYWxzIGFzIFwidXNlcm5hbWU6cGFzc3dvcmRcIiwgb3IgcGFzdGUgYSBmdWxsIFwiQmFzaWMgPGJhc2U2ND5cIiB0b2tlbjonKTtcbiAgICAgICAgaWYgKCFpbnB1dCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBub3JtID0gbm9ybWFsaXplKGlucHV0KTtcbiAgICAgICAgYXdhaXQgc2F2ZShub3JtKTtcbiAgICAgICAgYWxlcnQoJ1x1RDgzRFx1REQxMCBQbGV4IEFQSSBLZXkgc2F2ZWQnKTtcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBjbGVhcktleSgpIHtcbiAgICAgICAgYXdhaXQgR01fc2V0VmFsdWUoU1RPUkFHRV9LRVksICcnKTtcbiAgICAgICAgdHJ5IHsgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oU1RPUkFHRV9LRVkpOyB9IGNhdGNoIHsgfVxuICAgICAgICBhbGVydCgnXHVEODNEXHVERDEwIFBsZXggQVBJIEtleSBjbGVhcmVkJyk7XG4gICAgfVxuXG4gICAgLy8gRXhwb3NlIEFQSSAoYmFjay1jb21wYXQgKyBuZXcgYWxpYXMpXG4gICAgY29uc3QgYXBpID0geyBnZXRLZXksIHNldEtleSwgY2xlYXJLZXkgfTtcbiAgICB3aW5kb3cuUGxleEFQSSA9IGFwaTtcbiAgICB3aW5kb3cuUGxleEF1dGggPSBhcGk7XG4gICAgdHJ5IHsgdW5zYWZlV2luZG93LlBsZXhBdXRoID0gYXBpOyB9IGNhdGNoIHsgfVxuXG4gICAgaWYgKHR5cGVvZiBHTV9yZWdpc3Rlck1lbnVDb21tYW5kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIEdNX3JlZ2lzdGVyTWVudUNvbW1hbmQoJ1x1MjY5OVx1RkUwRiBTZXQgUGxleCBBUEkgS2V5Jywgc2V0S2V5KTtcbiAgICAgICAgR01fcmVnaXN0ZXJNZW51Q29tbWFuZCgnXHVEODNFXHVEREY5IENsZWFyIFBsZXggQVBJIEtleScsIGNsZWFyS2V5KTtcbiAgICB9XG59KSgpOyJdLAogICJtYXBwaW5ncyI6ICI7O0FBWUEsR0FBQyxXQUFZO0FBQ1QsVUFBTSxjQUFjO0FBRXBCLGFBQVMsVUFBVSxLQUFLO0FBQ3BCLFVBQUksQ0FBQyxJQUFLLFFBQU87QUFFakIsVUFBSSxxQkFBcUIsS0FBSyxHQUFHLEVBQUcsUUFBTyxJQUFJLEtBQUs7QUFDcEQsYUFBTyxTQUFTLEtBQUssSUFBSSxLQUFLLENBQUMsQ0FBQztBQUFBLElBQ3BDO0FBRUEsbUJBQWUsS0FBSyxLQUFLO0FBQ3JCLFlBQU0sWUFBWSxhQUFhLEdBQUc7QUFDbEMsVUFBSTtBQUFFLHFCQUFhLFFBQVEsYUFBYSxHQUFHO0FBQUEsTUFBRyxRQUFRO0FBQUEsTUFBRTtBQUFBLElBQzVEO0FBR0EsYUFBUyxTQUFTO0FBRWQsVUFBSSxNQUFNLFlBQVksYUFBYSxFQUFFO0FBQ3JDLFVBQUksSUFBSyxRQUFPLFVBQVUsR0FBRztBQUc3QixVQUFJO0FBQ0EsY0FBTSxLQUFLLGFBQWEsUUFBUSxXQUFXLEtBQUs7QUFDaEQsWUFBSSxJQUFJO0FBRUosc0JBQVksYUFBYSxFQUFFO0FBQzNCLGlCQUFPLFVBQVUsRUFBRTtBQUFBLFFBQ3ZCO0FBQUEsTUFDSixRQUFRO0FBQUEsTUFBRTtBQUVWLGFBQU87QUFBQSxJQUNYO0FBR0EsbUJBQWUsU0FBUztBQUNwQixZQUFNLFFBQVEsT0FBTyx3RkFBd0Y7QUFDN0csVUFBSSxDQUFDLE1BQU87QUFDWixZQUFNLE9BQU8sVUFBVSxLQUFLO0FBQzVCLFlBQU0sS0FBSyxJQUFJO0FBQ2YsWUFBTSw4QkFBdUI7QUFBQSxJQUNqQztBQUVBLG1CQUFlLFdBQVc7QUFDdEIsWUFBTSxZQUFZLGFBQWEsRUFBRTtBQUNqQyxVQUFJO0FBQUUscUJBQWEsV0FBVyxXQUFXO0FBQUEsTUFBRyxRQUFRO0FBQUEsTUFBRTtBQUN0RCxZQUFNLGdDQUF5QjtBQUFBLElBQ25DO0FBR0EsVUFBTSxNQUFNLEVBQUUsUUFBUSxRQUFRLFNBQVM7QUFDdkMsV0FBTyxVQUFVO0FBQ2pCLFdBQU8sV0FBVztBQUNsQixRQUFJO0FBQUUsbUJBQWEsV0FBVztBQUFBLElBQUssUUFBUTtBQUFBLElBQUU7QUFFN0MsUUFBSSxPQUFPLDJCQUEyQixZQUFZO0FBQzlDLDZCQUF1QixpQ0FBdUIsTUFBTTtBQUNwRCw2QkFBdUIsZ0NBQXlCLFFBQVE7QUFBQSxJQUM1RDtBQUFBLEVBQ0osR0FBRzsiLAogICJuYW1lcyI6IFtdCn0K
