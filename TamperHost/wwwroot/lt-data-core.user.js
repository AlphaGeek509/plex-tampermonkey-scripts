(() => {
  // src/shared/lt-data-core.user.js
  (function() {
    "use strict";
    const root = typeof unsafeWindow !== "undefined" ? unsafeWindow : window;
    function findDC(env = typeof unsafeWindow !== "undefined" ? unsafeWindow : window) {
      try {
        if (typeof lt !== "undefined" && lt?.core?.data) return { dc: lt.core.data, host: env };
      } catch {
      }
      try {
        if (env.lt?.core?.data) return { dc: env.lt.core.data, host: env };
      } catch {
      }
      for (let i = 0; i < env.frames.length; i++) {
        try {
          const r = findDC(env.frames[i]);
          if (r) return r;
        } catch {
        }
      }
      return null;
    }
    function install() {
      const ROOT = typeof unsafeWindow !== "undefined" ? unsafeWindow : window;
      const LT = typeof lt !== "undefined" ? lt : ROOT.lt = ROOT.lt || {};
      const CORE = LT.core = LT.core || {};
      let DC = CORE.data;
      if (!DC) {
        DC = CORE.data = {};
      }
      if (!DC.createDataContext) {
        DC.createDataContext = function createDataContext({ ns, scopeKey, persist = "session", ttlMs = null }) {
          const storage = persist === "local" ? ROOT.localStorage : ROOT.sessionStorage;
          const prefix = `lt:${ns}:${scopeKey}:`;
          const headerKey = `${prefix}header`;
          return {
            // Flat repo factory: we ignore RepoCtor and return a simple header repo
            makeRepo() {
              const api = {
                async get() {
                  try {
                    const s = storage.getItem(headerKey);
                    return s ? JSON.parse(s) : null;
                  } catch {
                    return null;
                  }
                },
                async getHeader() {
                  return this.get();
                },
                async patchHeader(patch) {
                  const cur = await this.get() || {};
                  const next = Object.assign({}, cur, patch || {});
                  try {
                    storage.setItem(headerKey, JSON.stringify(next));
                  } catch {
                  }
                  return next;
                },
                async clear() {
                  try {
                    storage.removeItem(headerKey);
                  } catch {
                  }
                },
                async ensureFromLegacyIfMissing() {
                }
              };
              return api;
            }
          };
        };
      }
      if (!DC.makeFlatScopedRepo) {
        let hashScope = function(s) {
          let h = 2166136261 >>> 0;
          for (let i = 0; i < s.length; i++) {
            h ^= s.charCodeAt(i);
            h = Math.imul(h, 16777619) >>> 0;
          }
          return h >>> 0;
        }, makeFlatScopedRepo = function({ ns, entity = "quote", persist = "session", ttlMs = null, legacyEntity = null } = {}) {
          function use(scopeKey) {
            const key = typeof scopeKey === "string" ? hashScope(scopeKey) : Number(scopeKey);
            if (!Number.isFinite(key) || key <= 0) throw new Error("Invalid scopeKey");
            const ctx = DC.createDataContext({ ns, scopeKey: key, persist, ttlMs });
            const repo = ctx.makeRepo(function FlatRepo() {
            });
            return { ctx, repo };
          }
          return { use, FlatRepo: function FlatRepo() {
          }, opts: { ns, entity, persist, ttlMs, legacyEntity } };
        };
        Object.defineProperty(DC, "makeFlatScopedRepo", { value: makeFlatScopedRepo, configurable: true, writable: true });
      }
      try {
      } catch {
      }
      return true;
    }
    install();
  })();
})();
;(function(g){try{if(typeof LTDataCore!=='undefined'){g.LTDataCore=LTDataCore;}}catch(e){}})(typeof unsafeWindow!=='undefined'?unsafeWindow:window);
//# sourceMappingURL=data:application/json;base64,
