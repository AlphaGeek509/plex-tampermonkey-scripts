// ==UserScript==
// @name        QT35_DEV
// @namespace   https://github.com/AlphaGeek509/plex-tampermonkey-scripts
// @version     3.8.130
// @description DEV-only build; includes user-start gate
// @match       https://lyntron.on.plex.com/SalesAndCRM/QuoteWizard*
// @match       https://lyntron.on.plex.com/SalesAndCrm/QuoteWizard*
// @match       https://lyntron.test.on.plex.com/SalesAndCRM/QuoteWizard*
// @match       https://lyntron.test.on.plex.com/SalesAndCrm/QuoteWizard*
// @require      http://localhost:5000/lt-plex-tm-utils.user.js?v=3.8.130-1758921588214
// @require      http://localhost:5000/lt-plex-auth.user.js?v=3.8.130-1758921588214
// @require      http://localhost:5000/lt-ui-hub.js?v=3.8.130-1758921588214
// @require      http://localhost:5000/lt-data-core.user.js?v=3.8.130-1758921588214
// @require      http://localhost:5000/lt-core.user.js?v=3.8.130-1758921588214
// @resource     THEME_CSS http://localhost:5000/theme.css
// @grant       GM_registerMenuCommand
// @grant       GM_getValue
// @grant       GM_setValue
// @grant       GM_xmlhttpRequest
// @grant       unsafeWindow
// @connect     *.plex.com
// @run-at      document-start
// @noframes
// @grant        GM_addStyle
// @grant        GM_getResourceText
// @updateURL   http://localhost:5000/qt35.user.js
// @downloadURL http://localhost:5000/qt35.user.js
// ==/UserScript==

(() => {
  // src/quote-tracking/qt35-attachmentsGet/qt35.index.js
  (() => {
    "use strict";
    const DEV = true ? true : true;
    const dlog = (...a) => DEV && console.debug("QT35", ...a);
    const derr = (...a) => console.error("QT35 \u2716\uFE0F", ...a);
    const ROOT = typeof unsafeWindow !== "undefined" ? unsafeWindow : window;
    const withFreshAuth = (fn) => {
      const impl = lt?.core?.auth?.withFreshAuth;
      return typeof impl === "function" ? impl(fn) : fn();
    };
    (async () => {
      const dock = await window.ensureLTDock?.();
      dock?.register({
        id: "qt35-attachments",
        label: "Attachments",
        title: "Open QT35 Attachments",
        weight: 120,
        onClick: () => typeof openAttachmentsModal === "function" ? openAttachmentsModal() : lt.core.hub.notify("Attachments UI not available", "warn", { toast: true })
      });
    })();
    const ROUTES = [/^\/SalesAndCRM\/QuoteWizard(?:\/|$)/i];
    const FORCE_SHOW_BTN = false;
    if (!ROUTES.some((rx) => rx.test(location.pathname))) return;
    const KO = typeof unsafeWindow !== "undefined" ? unsafeWindow.ko : window.ko;
    const raf = () => new Promise((r) => requestAnimationFrame(r));
    const CFG = {
      ACTION_BAR_SEL: "#QuoteWizardSharedActionBar",
      GRID_SEL: ".plex-grid",
      //SHOW_ON_PAGES_RE: /\bsummary\b/i,
      SHOW_ON_PAGES_RE: /^part\s*summary$/i,
      DS_ATTACHMENTS_BY_QUOTE: 11713,
      ATTACHMENT_GROUP_KEY: 11,
      DS_QUOTE_HEADER_GET: 3156,
      POLL_MS: 200,
      TIMEOUT_MS: 12e3
    };
    async function ensureWizardVM() {
      const anchor = document.querySelector(CFG.GRID_SEL) ? CFG.GRID_SEL : CFG.ACTION_BAR_SEL;
      const { viewModel } = await (window.TMUtils?.waitForModelAsync(anchor, { pollMs: CFG.POLL_MS, timeoutMs: CFG.TIMEOUT_MS, requireKo: true }) ?? { viewModel: null });
      return viewModel;
    }
    let quoteRepo = null, lastScope = null;
    let __QT__ = null;
    async function ensureRepoForQuote(quoteKey) {
      try {
        const repo = await lt?.core?.qt?.useQuoteRepo?.(Number(quoteKey));
        quoteRepo = repo;
        lastScope = Number(quoteKey);
        return repo;
      } catch {
        return null;
      }
    }
    const sleep = (ms) => new Promise((r) => setTimeout(r, ms));
    async function ensureRepoReady(qk, attempts = 6, delayMs = 250) {
      for (let i = 0; i < attempts; i++) {
        await ensureRepoForQuote(qk);
        if (quoteRepo) return quoteRepo;
        await sleep(delayMs);
      }
      return null;
    }
    function stopPromote() {
      return lt?.core?.qt?.stopRetry?.();
    }
    function __guardKeyForPromote(qk) {
      return `qt35:promoted:${Number(qk) || 0}`;
    }
    async function promoteDraftIfPresentOnce(qk) {
      const key = __guardKeyForPromote(qk);
      try {
        if (sessionStorage.getItem(key) === "1") return "guarded";
      } catch {
      }
      const draftRepo = await lt?.core?.qt?.useDraftRepo?.();
      const draft = draftRepo && (await draftRepo.getHeader?.() || await draftRepo.get?.());
      const hasDraft = !!(draft && Object.keys(draft).length);
      if (!hasDraft) return "no-draft";
      const res = await lt?.core?.qt?.promoteDraftToQuote?.({ qk: Number(qk), strategy: "once" }) || "noop";
      try {
        sessionStorage.setItem(key, "1");
      } catch {
      }
      return res;
    }
    async function fetchAttachmentCount(quoteKey) {
      const plex = typeof getPlexFacade === "function" ? await getPlexFacade() : ROOT.lt?.core?.plex;
      if (!plex?.dsRows) return 0;
      const rows = await withFreshAuth(() => plex.dsRows(CFG.DS_ATTACHMENTS_BY_QUOTE, {
        Attachment_Group_Key: CFG.ATTACHMENT_GROUP_KEY,
        Record_Key_Value: String(quoteKey)
      }));
      return Array.isArray(rows) ? rows.length : 0;
    }
    function quoteHeaderGet(row) {
      return {
        Customer_Code: row?.Customer_Code ?? null,
        Customer_Name: row?.Customer_Name ?? null,
        Customer_No: row?.Customer_No ?? null,
        Quote_No: row?.Quote_No ?? null
      };
    }
    const HUB_BTN_ID = "qt35-attachments-btn";
    async function setBadgeCount(n) {
      const count = Number(n ?? 0);
      const hub = await lt.core.qt.getHub({ mount: "nav" });
      if (!hub?.registerButton) return;
      const label = `Attachments (${count})`;
      if (typeof hub.updateButton === "function") {
        hub.updateButton(HUB_BTN_ID, { label });
        return;
      }
      const list = hub.list?.();
      const already = Array.isArray(list) && list.includes(HUB_BTN_ID);
      if (!already) {
        hub.registerButton("left", {
          id: HUB_BTN_ID,
          label,
          title: "Refresh attachments (manual)",
          weight: 120,
          onClick: () => runOneRefresh(true)
        });
      } else {
        hub.remove?.(HUB_BTN_ID);
        hub.registerButton("left", {
          id: HUB_BTN_ID,
          label: `Attachments ${count}`,
          title: "Refresh attachments (manual)",
          weight: 120,
          onClick: () => runOneRefresh(true)
        });
      }
    }
    let refreshInFlight = false;
    async function runOneRefresh(manual = false) {
      await lt.core.qt.ensureHubButton({
        id: HUB_BTN_ID,
        label: "Attachments (0)",
        title: "Refresh attachments (manual)",
        side: "left",
        weight: 120,
        onClick: () => runOneRefresh(true),
        showWhen: (ctx) => typeof FORCE_SHOW_BTN !== "undefined" && FORCE_SHOW_BTN || CFG.SHOW_ON_PAGES_RE.test(ctx.pageName) || ctx.isOnPartSummary,
        mount: "nav"
      });
      if (refreshInFlight) return;
      refreshInFlight = true;
      const t = lt.core.hub.beginTask("Fetching Attachments\u2026", "info");
      try {
        await ensureWizardVM();
        const ctx = lt?.core?.qt?.getQuoteContext?.();
        const qk = Number(ctx?.quoteKey);
        if (!qk || !Number.isFinite(qk) || qk <= 0) {
          setBadgeCount(0);
          t.error(`\u26A0\uFE0F Quote Key not found`, 4e3);
          return;
        }
        if (!quoteRepo || lastScope !== qk) {
          await ensureRepoForQuote(qk);
          try {
            const head = await quoteRepo?.getHeader?.();
            if (head?.Attachment_Count != null) setBadgeCount(Number(head.Attachment_Count));
          } catch {
          }
        }
        await promoteDraftIfPresentOnce(qk);
        await ensureRepoReady(qk, 6, 250);
        if (!quoteRepo) {
          t.error("Data context warming \u2014 try again in a moment", 2500);
          return;
        }
        const count = await fetchAttachmentCount(qk);
        setBadgeCount(count);
        await quoteRepo.patchHeader({ Quote_Key: qk, Attachment_Count: Number(count) });
        const ok = count > 0;
        t.success(ok ? `\u2705 ${count} attachment(s)` : "No attachments", 2e3);
        if (manual) {
          lt.core.hub.notify(
            ok ? `\u2705 ${count} attachment(s)` : "No attachments",
            ok ? "success" : "warn",
            { timeout: 2e3, toast: true }
          );
        }
        dlog("refresh", { qk, count });
      } catch (err) {
        derr("refresh failed", err);
        t.error(`\u274C Attachments refresh failed: ${err?.message || err}`, 4e3);
        lt.core.hub.notify(
          `\u274C Attachments refresh failed: ${err?.message || err}`,
          "error",
          { timeout: 4e3, toast: true }
        );
      } finally {
        refreshInFlight = false;
      }
    }
    let __qt35_autoRefreshTimer = null;
    function onAttachmentRefreshRequested(ev) {
      try {
        const ctx = lt?.core?.qt?.getQuoteContext?.();
        const onPartSummary = !!(ctx && (ctx.isOnPartSummary || CFG.SHOW_ON_PAGES_RE.test(ctx.pageName || "")));
        if (!onPartSummary) return;
        clearTimeout(__qt35_autoRefreshTimer);
        __qt35_autoRefreshTimer = setTimeout(() => {
          runOneRefresh(false);
        }, 350);
      } catch {
      }
    }
    let booted = false;
    let offUrl = null;
    function wireNav(handler) {
      offUrl?.();
      offUrl = window.TMUtils?.onUrlChange?.(handler);
    }
    async function init() {
      if (booted) return;
      booted = true;
      try {
        window.addEventListener("LT:AttachmentRefreshRequested", onAttachmentRefreshRequested, false);
      } catch {
      }
      await lt.core.qt.ensureHubButton({
        id: "qt35-attachments-btn",
        label: "Attachments (0)",
        title: "Refresh attachments (manual)",
        side: "left",
        weight: 120,
        onClick: () => runOneRefresh(true),
        showWhen: (ctx) => typeof FORCE_SHOW_BTN !== "undefined" && FORCE_SHOW_BTN || CFG.SHOW_ON_PAGES_RE.test(ctx.pageName) || ctx.isOnPartSummary,
        mount: "nav"
      });
    }
    function teardown() {
      booted = false;
      offUrl?.();
      offUrl = null;
      stopPromote();
      try {
        window.removeEventListener("LT:AttachmentRefreshRequested", onAttachmentRefreshRequested, false);
      } catch {
      }
    }
    init();
    wireNav(() => {
      if (ROUTES.some((rx) => rx.test(location.pathname))) init();
      else teardown();
    });
  })();
})();
//# sourceMappingURL=data:application/json;base64,
