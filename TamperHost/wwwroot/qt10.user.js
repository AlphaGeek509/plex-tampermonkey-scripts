// ==UserScript==
// @name        QT10_DEV
// @namespace   https://github.com/AlphaGeek509/plex-tampermonkey-scripts
// @version     3.6.28
// @description DEV-only build; includes user-start gate
// @match       https://*.plex.com/*
// @match       https://*.on.plex.com/*
// @require  http://localhost:5000/lt-plex-auth.user.js
// @require  http://localhost:5000/lt-plex-tm-utils.user.js
// @require  http://localhost:5000/lt-data-core.user.js
// @require  http://localhost:5000/lt-core.user.js
// @grant       GM_registerMenuCommand
// @grant       GM_getValue
// @grant       GM_setValue
// @grant       GM_xmlHttpRequest
// @grant       unsafeWindow
// @connect     *.plex.com
// @run-at      document-idle
// @noframes
// ==/UserScript==

(() => {
  // src/quote-tracking/qt10-customerCatalogGet/qt10.index.js
  (function() {
    "use strict";
    const DEV = true ? true : !!(typeof globalThis !== "undefined" && globalThis.__TM_DEV__);
    const CFG = {
      NAME: "QT10",
      ROUTES: [/^\/SalesAndCRM\/QuoteWizard(?:\/|$)/i],
      // KO-bound anchor we wait for to ensure VM is ready
      ANCHOR: '[data-val-property-name="CustomerNo"]',
      // Data sources
      DS_CATALOG_BY_CUSTOMER: 319,
      DS_CATALOG_CODE_BY_KEY: 22696,
      // If true, don’t pre-fire on page load; wait for a real user edit
      GATE_USER_EDIT: true,
      // Toast happy path
      TOAST_SUCCESS: true
    };
    const IS_TEST_ENV = /test\.on\.plex\.com$/i.test(location.hostname);
    try {
      TMUtils.setDebug?.(IS_TEST_ENV);
    } catch {
    }
    const L = TMUtils.getLogger?.(CFG.NAME);
    const dlog = (...a) => {
      if (IS_TEST_ENV) L?.log?.(...a);
    };
    const derror = (...a) => {
      if (IS_TEST_ENV) L?.error?.(...a);
    };
    if (!TMUtils.matchRoute?.(CFG.ROUTES)) return;
    const hasDataCore = !!(lt?.core?.data?.createDataContext && lt?.core?.data?.RepoBase?.value);
    const SCOPE_DRAFT = "draft";
    let ctx = null, quoteRepo = null, lastScope = null;
    async function ensureRepoScope(scopeKey) {
      if (!scopeKey || !hasDataCore) return null;
      if (!ctx || lastScope !== scopeKey) {
        ctx = lt.core.data.createDataContext({ ns: "QT", scopeKey, persist: "session", ttlMs: 3e3 });
        try {
          sessionStorage.setItem("lt.tabId", ctx.tabId);
        } catch {
        }
        class QuoteRepo extends lt.core.data.RepoBase.value {
          constructor(base) {
            super({ ...base, entity: "QuoteHeader" });
          }
          async get() {
            return this.read("current");
          }
          async set(m) {
            return this.write("current", m);
          }
          async update(patch) {
            const prev = await this.get() ?? {};
            return this.write("current", { ...prev, ...patch, Updated_At: Date.now() });
          }
          async clear() {
            return this.remove("current");
          }
        }
        quoteRepo = ctx.makeRepo(QuoteRepo);
        lastScope = scopeKey;
      }
      return quoteRepo;
    }
    async function withFreshAuth(run) {
      try {
        return await run();
      } catch (err) {
        const status = err?.status || (/\b(\d{3})\b/.exec(err?.message || "") || [])[1];
        if (+status === 419) {
          await lt.core.auth.getKey();
          return await run();
        }
        throw err;
      }
    }
    async function ensureAuthOrToast() {
      try {
        if (await lt.core.auth.getKey()) return true;
      } catch {
      }
      TMUtils.toast?.("Sign-in required. Please log in, then retry.", "warn");
      return false;
    }
    async function anchorAppears(sel, { timeoutMs = 1e4, pollMs = 150 } = {}) {
      const t0 = Date.now();
      while (Date.now() - t0 < timeoutMs) {
        if (document.querySelector(sel)) return true;
        await TMUtils.sleep(pollMs);
      }
      return !!document.querySelector(sel);
    }
    let booted = false, booting = false, disposeWatcher = null, unsubscribeUrl = null;
    async function maybeBoot() {
      if (booted || booting) return;
      booting = true;
      try {
        if (!TMUtils.matchRoute?.(CFG.ROUTES)) return;
        if (!await anchorAppears(CFG.ANCHOR)) return;
        if (!await ensureAuthOrToast()) return;
        const { controller, viewModel } = await TMUtils.waitForModelAsync(CFG.ANCHOR, {
          pollMs: 200,
          timeoutMs: 8e3,
          logger: IS_TEST_ENV ? L : null
        });
        if (!controller || !viewModel) return;
        let lastCustomerNo = null;
        disposeWatcher = TMUtils.watchBySelector({
          selector: CFG.ANCHOR,
          // If user-gated, don’t fire an initial read; wait for real input
          initial: !CFG.GATE_USER_EDIT ? true : false,
          fireOn: "blur",
          settleMs: 350,
          logger: IS_TEST_ENV ? L : null,
          onChange: async () => {
            const customerNo = TMUtils.getObsValue(viewModel, "CustomerNo", { first: true, trim: true });
            if (!customerNo || customerNo === lastCustomerNo) return;
            lastCustomerNo = customerNo;
            await ensureRepoScope(SCOPE_DRAFT);
            await applyCatalogFor(customerNo, viewModel);
          }
        });
        booted = true;
      } catch (e) {
        booted = false;
        derror(`${CFG.NAME} init failed:`, e);
      } finally {
        booting = false;
      }
    }
    async function applyCatalogFor(customerNo, vm) {
      if (!customerNo) return;
      try {
        const rows1 = await withFreshAuth(
          () => lt.core.plex.dsRows(CFG.DS_CATALOG_BY_CUSTOMER, { Customer_No: customerNo })
        );
        const row1 = Array.isArray(rows1) ? rows1[0] : null;
        const catalogKey = row1?.Catalog_Key || 0;
        if (!catalogKey) {
          TMUtils.toast?.(`\u26A0\uFE0F No catalog for ${customerNo}`, "warn");
          return;
        }
        const rows2 = await withFreshAuth(
          () => lt.core.plex.dsRows(CFG.DS_CATALOG_CODE_BY_KEY, { Catalog_Key: catalogKey })
        );
        const catalogCode = (Array.isArray(rows2) ? rows2.map((r) => r?.Catalog_Code).find(Boolean) : null) || "";
        TMUtils.setObsValue(vm, "CatalogKey", catalogKey);
        TMUtils.setObsValue(vm, "CatalogCode", catalogCode);
        const repo = await ensureRepoScope(SCOPE_DRAFT);
        await repo.update({
          Customer_No: String(customerNo),
          Catalog_Key: catalogKey,
          Catalog_Code: catalogCode,
          Catalog_Fetched_At: Date.now()
        });
        if (CFG.TOAST_SUCCESS) {
          TMUtils.toast?.(
            `\u2705 Customer: ${customerNo}
CatalogKey: ${catalogKey}
CatalogCode: ${catalogCode}`,
            "success"
          );
        }
      } catch (err) {
        TMUtils.toast?.(`\u274C Lookup failed: ${err?.message || err}`, "error");
        derror(err);
      }
    }
    unsubscribeUrl = TMUtils.onUrlChange?.(() => {
      if (!TMUtils.matchRoute?.(CFG.ROUTES)) {
        try {
          disposeWatcher?.();
        } catch {
        }
        disposeWatcher = null;
        booted = false;
        booting = false;
        return;
      }
      setTimeout(maybeBoot, 0);
    });
    setTimeout(maybeBoot, 0);
    window.QT10_debugDraft = async () => {
      const repo = await ensureRepoScope(SCOPE_DRAFT);
      console.debug("QT10 draft \u2192", await repo?.get());
    };
  })();
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vdG0tc2NyaXB0cy9zcmMvcXVvdGUtdHJhY2tpbmcvcXQxMC1jdXN0b21lckNhdGFsb2dHZXQvcXQxMC5pbmRleC5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLy8gc3JjL3F1b3RlLXRyYWNraW5nL3F0MTAtY3VzdG9tZXJDYXRhbG9nR2V0L3F0MTAuaW5kZXguanNcbi8vIERyb3AtaW4gbW9kdWxlIChidW5kbGVkIGJ5IGJ1aWxkLXBsdXMvZXNidWlsZCkuIE5vIFRNIGhlYWRlciBoZXJlOyB5b3VyIGJ1aWxkIGluamVjdHMgaXQuXG4vLyBSZXN0b3JlcyBidXNpbmVzcyBsb2dpYyBmcm9tIHF0MTAuYmFja3VwLmpzIGFuZCBmaXhlcyBSZXBvQmFzZSBjbGFzcyBpbnZvY2F0aW9uLlxuXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8vID09PT09IERldiBmbGFnIChidWlsZC10aW1lIHdpdGggcnVudGltZSBmYWxsYmFjaykgPT09PT1cbiAgICBjb25zdCBERVYgPSAodHlwZW9mIF9fQlVJTERfREVWX18gIT09ICd1bmRlZmluZWQnKVxuICAgICAgICA/IF9fQlVJTERfREVWX19cbiAgICAgICAgOiAhISh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsVGhpcy5fX1RNX0RFVl9fKTtcblxuICAgIC8vID09PT09IENvbmZpZyA9PT09PVxuICAgIGNvbnN0IENGRyA9IHtcbiAgICAgICAgTkFNRTogJ1FUMTAnLFxuICAgICAgICBST1VURVM6IFsvXlxcL1NhbGVzQW5kQ1JNXFwvUXVvdGVXaXphcmQoPzpcXC98JCkvaV0sXG4gICAgICAgIC8vIEtPLWJvdW5kIGFuY2hvciB3ZSB3YWl0IGZvciB0byBlbnN1cmUgVk0gaXMgcmVhZHlcbiAgICAgICAgQU5DSE9SOiAnW2RhdGEtdmFsLXByb3BlcnR5LW5hbWU9XCJDdXN0b21lck5vXCJdJyxcbiAgICAgICAgLy8gRGF0YSBzb3VyY2VzXG4gICAgICAgIERTX0NBVEFMT0dfQllfQ1VTVE9NRVI6IDMxOSxcbiAgICAgICAgRFNfQ0FUQUxPR19DT0RFX0JZX0tFWTogMjI2OTYsXG4gICAgICAgIC8vIElmIHRydWUsIGRvblx1MjAxOXQgcHJlLWZpcmUgb24gcGFnZSBsb2FkOyB3YWl0IGZvciBhIHJlYWwgdXNlciBlZGl0XG4gICAgICAgIEdBVEVfVVNFUl9FRElUOiB0cnVlLFxuICAgICAgICAvLyBUb2FzdCBoYXBweSBwYXRoXG4gICAgICAgIFRPQVNUX1NVQ0NFU1M6IHRydWUsXG4gICAgfTtcblxuICAgIC8vID09PT09IERlYnVnIC8gTG9nZ2VyIC8gREVWIHRvYXN0ID09PT09XG4gICAgY29uc3QgSVNfVEVTVF9FTlYgPSAvdGVzdFxcLm9uXFwucGxleFxcLmNvbSQvaS50ZXN0KGxvY2F0aW9uLmhvc3RuYW1lKTtcbiAgICB0cnkgeyBUTVV0aWxzLnNldERlYnVnPy4oSVNfVEVTVF9FTlYpOyB9IGNhdGNoIHsgfVxuICAgIGNvbnN0IEwgPSBUTVV0aWxzLmdldExvZ2dlcj8uKENGRy5OQU1FKTtcbiAgICBjb25zdCBkbG9nID0gKC4uLmEpID0+IHsgaWYgKElTX1RFU1RfRU5WKSBMPy5sb2c/LiguLi5hKTsgfTtcbiAgICBjb25zdCBkZXJyb3IgPSAoLi4uYSkgPT4geyBpZiAoSVNfVEVTVF9FTlYpIEw/LmVycm9yPy4oLi4uYSk7IH07XG5cbiAgICAvLyA9PT09PSBSb3V0ZSBhbGxvd2xpc3QgPT09PT1cbiAgICBpZiAoIVRNVXRpbHMubWF0Y2hSb3V0ZT8uKENGRy5ST1VURVMpKSByZXR1cm47XG5cbiAgICAvLyA9PT09PSBEYXRhIHZpYSBsdC5jb3JlLmRhdGEgPT09PT1cbiAgICBjb25zdCBoYXNEYXRhQ29yZSA9ICEhKGx0Py5jb3JlPy5kYXRhPy5jcmVhdGVEYXRhQ29udGV4dCAmJiBsdD8uY29yZT8uZGF0YT8uUmVwb0Jhc2U/LnZhbHVlKTtcbiAgICBjb25zdCBTQ09QRV9EUkFGVCA9ICdkcmFmdCc7XG5cbiAgICBsZXQgY3R4ID0gbnVsbCwgcXVvdGVSZXBvID0gbnVsbCwgbGFzdFNjb3BlID0gbnVsbDtcbiAgICBhc3luYyBmdW5jdGlvbiBlbnN1cmVSZXBvU2NvcGUoc2NvcGVLZXkpIHtcbiAgICAgICAgaWYgKCFzY29wZUtleSB8fCAhaGFzRGF0YUNvcmUpIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoIWN0eCB8fCBsYXN0U2NvcGUgIT09IHNjb3BlS2V5KSB7XG4gICAgICAgICAgICBjdHggPSBsdC5jb3JlLmRhdGEuY3JlYXRlRGF0YUNvbnRleHQoeyBuczogJ1FUJywgc2NvcGVLZXksIHBlcnNpc3Q6ICdzZXNzaW9uJywgdHRsTXM6IDMwMDAgfSk7XG4gICAgICAgICAgICB0cnkgeyBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdsdC50YWJJZCcsIGN0eC50YWJJZCk7IH0gY2F0Y2ggeyB9XG4gICAgICAgICAgICBjbGFzcyBRdW90ZVJlcG8gZXh0ZW5kcyBsdC5jb3JlLmRhdGEuUmVwb0Jhc2UudmFsdWUge1xuICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKGJhc2UpIHsgc3VwZXIoeyAuLi5iYXNlLCBlbnRpdHk6ICdRdW90ZUhlYWRlcicgfSk7IH1cbiAgICAgICAgICAgICAgICBhc3luYyBnZXQoKSB7IHJldHVybiB0aGlzLnJlYWQoJ2N1cnJlbnQnKTsgfVxuICAgICAgICAgICAgICAgIGFzeW5jIHNldChtKSB7IHJldHVybiB0aGlzLndyaXRlKCdjdXJyZW50JywgbSk7IH1cbiAgICAgICAgICAgICAgICBhc3luYyB1cGRhdGUocGF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IChhd2FpdCB0aGlzLmdldCgpKSA/PyB7fTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMud3JpdGUoJ2N1cnJlbnQnLCB7IC4uLnByZXYsIC4uLnBhdGNoLCBVcGRhdGVkX0F0OiBEYXRlLm5vdygpIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhc3luYyBjbGVhcigpIHsgcmV0dXJuIHRoaXMucmVtb3ZlKCdjdXJyZW50Jyk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHF1b3RlUmVwbyA9IGN0eC5tYWtlUmVwbyhRdW90ZVJlcG8pO1xuICAgICAgICAgICAgbGFzdFNjb3BlID0gc2NvcGVLZXk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHF1b3RlUmVwbztcbiAgICB9XG5cbiAgICAvLyA9PT09PSBBdXRoIGhlbHBlcnMgPT09PT1cbiAgICBhc3luYyBmdW5jdGlvbiB3aXRoRnJlc2hBdXRoKHJ1bikge1xuICAgICAgICB0cnkgeyByZXR1cm4gYXdhaXQgcnVuKCk7IH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc3Qgc3RhdHVzID0gZXJyPy5zdGF0dXMgfHwgKC9cXGIoXFxkezN9KVxcYi8uZXhlYyhlcnI/Lm1lc3NhZ2UgfHwgJycpIHx8IFtdKVsxXTtcbiAgICAgICAgICAgIGlmICgrc3RhdHVzID09PSA0MTkpIHsgYXdhaXQgbHQuY29yZS5hdXRoLmdldEtleSgpOyByZXR1cm4gYXdhaXQgcnVuKCk7IH1cbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBmdW5jdGlvbiBlbnN1cmVBdXRoT3JUb2FzdCgpIHtcbiAgICAgICAgdHJ5IHsgaWYgKGF3YWl0IGx0LmNvcmUuYXV0aC5nZXRLZXkoKSkgcmV0dXJuIHRydWU7IH0gY2F0Y2ggeyB9XG4gICAgICAgIFRNVXRpbHMudG9hc3Q/LignU2lnbi1pbiByZXF1aXJlZC4gUGxlYXNlIGxvZyBpbiwgdGhlbiByZXRyeS4nLCAnd2FybicpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gPT09PT0gRE9NL0tPIHJlYWRpbmVzcyA9PT09PVxuICAgIGFzeW5jIGZ1bmN0aW9uIGFuY2hvckFwcGVhcnMoc2VsLCB7IHRpbWVvdXRNcyA9IDEwMDAwLCBwb2xsTXMgPSAxNTAgfSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHQwID0gRGF0ZS5ub3coKTtcbiAgICAgICAgd2hpbGUgKERhdGUubm93KCkgLSB0MCA8IHRpbWVvdXRNcykge1xuICAgICAgICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsKSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBhd2FpdCBUTVV0aWxzLnNsZWVwKHBvbGxNcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEhZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWwpO1xuICAgIH1cblxuICAgIC8vID09PT09IEJvb3RzdHJhcCAoU1BBLXNhZmUpID09PT09XG4gICAgbGV0IGJvb3RlZCA9IGZhbHNlLCBib290aW5nID0gZmFsc2UsIGRpc3Bvc2VXYXRjaGVyID0gbnVsbCwgdW5zdWJzY3JpYmVVcmwgPSBudWxsO1xuXG4gICAgYXN5bmMgZnVuY3Rpb24gbWF5YmVCb290KCkge1xuICAgICAgICBpZiAoYm9vdGVkIHx8IGJvb3RpbmcpIHJldHVybjtcbiAgICAgICAgYm9vdGluZyA9IHRydWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIVRNVXRpbHMubWF0Y2hSb3V0ZT8uKENGRy5ST1VURVMpKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoIShhd2FpdCBhbmNob3JBcHBlYXJzKENGRy5BTkNIT1IpKSkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKCEoYXdhaXQgZW5zdXJlQXV0aE9yVG9hc3QoKSkpIHJldHVybjtcblxuICAgICAgICAgICAgY29uc3QgeyBjb250cm9sbGVyLCB2aWV3TW9kZWwgfSA9IGF3YWl0IFRNVXRpbHMud2FpdEZvck1vZGVsQXN5bmMoQ0ZHLkFOQ0hPUiwge1xuICAgICAgICAgICAgICAgIHBvbGxNczogMjAwLCB0aW1lb3V0TXM6IDgwMDAsIGxvZ2dlcjogSVNfVEVTVF9FTlYgPyBMIDogbnVsbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIWNvbnRyb2xsZXIgfHwgIXZpZXdNb2RlbCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAvLyBJTVBPUlRBTlQ6IFFUMTAgaXMgQ0FUQUxPRy1PTkxZOyBkbyBOT1Qgc3RvcmUgUXVvdGVfS2V5L1F1b3RlX05vIGhlcmUuXG5cbiAgICAgICAgICAgIC8vIFdhdGNoIEN1c3RvbWVyTm8gXHUyMTkyIGxvb2sgdXAgY2F0YWxvZyBcdTIxOTIgd3JpdGUgdG8gRFJBRlQgc2NvcGVcbiAgICAgICAgICAgIGxldCBsYXN0Q3VzdG9tZXJObyA9IG51bGw7XG4gICAgICAgICAgICBkaXNwb3NlV2F0Y2hlciA9IFRNVXRpbHMud2F0Y2hCeVNlbGVjdG9yKHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogQ0ZHLkFOQ0hPUixcbiAgICAgICAgICAgICAgICAvLyBJZiB1c2VyLWdhdGVkLCBkb25cdTIwMTl0IGZpcmUgYW4gaW5pdGlhbCByZWFkOyB3YWl0IGZvciByZWFsIGlucHV0XG4gICAgICAgICAgICAgICAgaW5pdGlhbDogIUNGRy5HQVRFX1VTRVJfRURJVCA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBmaXJlT246ICdibHVyJyxcbiAgICAgICAgICAgICAgICBzZXR0bGVNczogMzUwLFxuICAgICAgICAgICAgICAgIGxvZ2dlcjogSVNfVEVTVF9FTlYgPyBMIDogbnVsbCxcbiAgICAgICAgICAgICAgICBvbkNoYW5nZTogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXN0b21lck5vID0gVE1VdGlscy5nZXRPYnNWYWx1ZSh2aWV3TW9kZWwsICdDdXN0b21lck5vJywgeyBmaXJzdDogdHJ1ZSwgdHJpbTogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdXN0b21lck5vIHx8IGN1c3RvbWVyTm8gPT09IGxhc3RDdXN0b21lck5vKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGxhc3RDdXN0b21lck5vID0gY3VzdG9tZXJObztcblxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBlbnN1cmVSZXBvU2NvcGUoU0NPUEVfRFJBRlQpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBhcHBseUNhdGFsb2dGb3IoY3VzdG9tZXJObywgdmlld01vZGVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgYm9vdGVkID0gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgYm9vdGVkID0gZmFsc2U7XG4gICAgICAgICAgICBkZXJyb3IoYCR7Q0ZHLk5BTUV9IGluaXQgZmFpbGVkOmAsIGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgYm9vdGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gPT09PT0gQ29yZSBidXNpbmVzcyBsb2dpYzogQ3VzdG9tZXIgXHUyMTkyIENhdGFsb2dLZXkgXHUyMTkyIENhdGFsb2dDb2RlID09PT09XG4gICAgYXN5bmMgZnVuY3Rpb24gYXBwbHlDYXRhbG9nRm9yKGN1c3RvbWVyTm8sIHZtKSB7XG4gICAgICAgIGlmICghY3VzdG9tZXJObykgcmV0dXJuO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gMSkgQ3VzdG9tZXIgXHUyMTkyIENhdGFsb2dLZXlcbiAgICAgICAgICAgIGNvbnN0IHJvd3MxID0gYXdhaXQgd2l0aEZyZXNoQXV0aCgoKSA9PlxuICAgICAgICAgICAgICAgIGx0LmNvcmUucGxleC5kc1Jvd3MoQ0ZHLkRTX0NBVEFMT0dfQllfQ1VTVE9NRVIsIHsgQ3VzdG9tZXJfTm86IGN1c3RvbWVyTm8gfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zdCByb3cxID0gQXJyYXkuaXNBcnJheShyb3dzMSkgPyByb3dzMVswXSA6IG51bGw7XG4gICAgICAgICAgICBjb25zdCBjYXRhbG9nS2V5ID0gcm93MT8uQ2F0YWxvZ19LZXkgfHwgMDtcbiAgICAgICAgICAgIGlmICghY2F0YWxvZ0tleSkgeyBUTVV0aWxzLnRvYXN0Py4oYFx1MjZBMFx1RkUwRiBObyBjYXRhbG9nIGZvciAke2N1c3RvbWVyTm99YCwgJ3dhcm4nKTsgcmV0dXJuOyB9XG5cbiAgICAgICAgICAgIC8vIDIpIENhdGFsb2dLZXkgXHUyMTkyIENhdGFsb2dDb2RlXG4gICAgICAgICAgICBjb25zdCByb3dzMiA9IGF3YWl0IHdpdGhGcmVzaEF1dGgoKCkgPT5cbiAgICAgICAgICAgICAgICBsdC5jb3JlLnBsZXguZHNSb3dzKENGRy5EU19DQVRBTE9HX0NPREVfQllfS0VZLCB7IENhdGFsb2dfS2V5OiBjYXRhbG9nS2V5IH0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3QgY2F0YWxvZ0NvZGUgPSAoQXJyYXkuaXNBcnJheShyb3dzMikgPyByb3dzMi5tYXAociA9PiByPy5DYXRhbG9nX0NvZGUpLmZpbmQoQm9vbGVhbikgOiBudWxsKSB8fCAnJztcblxuICAgICAgICAgICAgLy8gMykgUmVmbGVjdCBpbiBLT1xuICAgICAgICAgICAgVE1VdGlscy5zZXRPYnNWYWx1ZSh2bSwgJ0NhdGFsb2dLZXknLCBjYXRhbG9nS2V5KTtcbiAgICAgICAgICAgIFRNVXRpbHMuc2V0T2JzVmFsdWUodm0sICdDYXRhbG9nQ29kZScsIGNhdGFsb2dDb2RlKTtcblxuICAgICAgICAgICAgLy8gNCkgU3Rhc2ggaW50byBEUkFGVCBzY29wZSAocGVyLXRhYilcbiAgICAgICAgICAgIGNvbnN0IHJlcG8gPSBhd2FpdCBlbnN1cmVSZXBvU2NvcGUoU0NPUEVfRFJBRlQpO1xuICAgICAgICAgICAgYXdhaXQgcmVwby51cGRhdGUoe1xuICAgICAgICAgICAgICAgIEN1c3RvbWVyX05vOiBTdHJpbmcoY3VzdG9tZXJObyksXG4gICAgICAgICAgICAgICAgQ2F0YWxvZ19LZXk6IGNhdGFsb2dLZXksXG4gICAgICAgICAgICAgICAgQ2F0YWxvZ19Db2RlOiBjYXRhbG9nQ29kZSxcbiAgICAgICAgICAgICAgICBDYXRhbG9nX0ZldGNoZWRfQXQ6IERhdGUubm93KCksXG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICBpZiAoQ0ZHLlRPQVNUX1NVQ0NFU1MpIHtcbiAgICAgICAgICAgICAgICBUTVV0aWxzLnRvYXN0Py4oXG4gICAgICAgICAgICAgICAgICAgIGBcdTI3MDUgQ3VzdG9tZXI6ICR7Y3VzdG9tZXJOb31cXG5DYXRhbG9nS2V5OiAke2NhdGFsb2dLZXl9XFxuQ2F0YWxvZ0NvZGU6ICR7Y2F0YWxvZ0NvZGV9YCxcbiAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBUTVV0aWxzLnRvYXN0Py4oYFx1Mjc0QyBMb29rdXAgZmFpbGVkOiAke2Vycj8ubWVzc2FnZSB8fCBlcnJ9YCwgJ2Vycm9yJyk7XG4gICAgICAgICAgICBkZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vID09PT09IFNQQSBuYXYgaGFuZGxpbmcgPT09PT1cbiAgICB1bnN1YnNjcmliZVVybCA9IFRNVXRpbHMub25VcmxDaGFuZ2U/LigoKSA9PiB7XG4gICAgICAgIGlmICghVE1VdGlscy5tYXRjaFJvdXRlPy4oQ0ZHLlJPVVRFUykpIHtcbiAgICAgICAgICAgIHRyeSB7IGRpc3Bvc2VXYXRjaGVyPy4oKTsgfSBjYXRjaCB7IH1cbiAgICAgICAgICAgIGRpc3Bvc2VXYXRjaGVyID0gbnVsbDsgYm9vdGVkID0gZmFsc2U7IGJvb3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZXRUaW1lb3V0KG1heWJlQm9vdCwgMCk7XG4gICAgfSk7XG5cbiAgICBzZXRUaW1lb3V0KG1heWJlQm9vdCwgMCk7XG5cbiAgICAvLyBPcHRpb25hbCB0aW55IGRlYnVnXG4gICAgd2luZG93LlFUMTBfZGVidWdEcmFmdCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVwbyA9IGF3YWl0IGVuc3VyZVJlcG9TY29wZShTQ09QRV9EUkFGVCk7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoJ1FUMTAgZHJhZnQgXHUyMTkyJywgYXdhaXQgcmVwbz8uZ2V0KCkpO1xuICAgIH07XG59KSgpO1xuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJQSxHQUFDLFdBQVk7QUFDVDtBQUdBLFVBQU0sTUFBTyxPQUNQLE9BQ0EsQ0FBQyxFQUFFLE9BQU8sZUFBZSxlQUFlLFdBQVc7QUFHekQsVUFBTSxNQUFNO0FBQUEsTUFDUixNQUFNO0FBQUEsTUFDTixRQUFRLENBQUMsc0NBQXNDO0FBQUE7QUFBQSxNQUUvQyxRQUFRO0FBQUE7QUFBQSxNQUVSLHdCQUF3QjtBQUFBLE1BQ3hCLHdCQUF3QjtBQUFBO0FBQUEsTUFFeEIsZ0JBQWdCO0FBQUE7QUFBQSxNQUVoQixlQUFlO0FBQUEsSUFDbkI7QUFHQSxVQUFNLGNBQWMsd0JBQXdCLEtBQUssU0FBUyxRQUFRO0FBQ2xFLFFBQUk7QUFBRSxjQUFRLFdBQVcsV0FBVztBQUFBLElBQUcsUUFBUTtBQUFBLElBQUU7QUFDakQsVUFBTSxJQUFJLFFBQVEsWUFBWSxJQUFJLElBQUk7QUFDdEMsVUFBTSxPQUFPLElBQUksTUFBTTtBQUFFLFVBQUksWUFBYSxJQUFHLE1BQU0sR0FBRyxDQUFDO0FBQUEsSUFBRztBQUMxRCxVQUFNLFNBQVMsSUFBSSxNQUFNO0FBQUUsVUFBSSxZQUFhLElBQUcsUUFBUSxHQUFHLENBQUM7QUFBQSxJQUFHO0FBRzlELFFBQUksQ0FBQyxRQUFRLGFBQWEsSUFBSSxNQUFNLEVBQUc7QUFHdkMsVUFBTSxjQUFjLENBQUMsRUFBRSxJQUFJLE1BQU0sTUFBTSxxQkFBcUIsSUFBSSxNQUFNLE1BQU0sVUFBVTtBQUN0RixVQUFNLGNBQWM7QUFFcEIsUUFBSSxNQUFNLE1BQU0sWUFBWSxNQUFNLFlBQVk7QUFDOUMsbUJBQWUsZ0JBQWdCLFVBQVU7QUFDckMsVUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFhLFFBQU87QUFDdEMsVUFBSSxDQUFDLE9BQU8sY0FBYyxVQUFVO0FBQ2hDLGNBQU0sR0FBRyxLQUFLLEtBQUssa0JBQWtCLEVBQUUsSUFBSSxNQUFNLFVBQVUsU0FBUyxXQUFXLE9BQU8sSUFBSyxDQUFDO0FBQzVGLFlBQUk7QUFBRSx5QkFBZSxRQUFRLFlBQVksSUFBSSxLQUFLO0FBQUEsUUFBRyxRQUFRO0FBQUEsUUFBRTtBQUFBLFFBQy9ELE1BQU0sa0JBQWtCLEdBQUcsS0FBSyxLQUFLLFNBQVMsTUFBTTtBQUFBLFVBQ2hELFlBQVksTUFBTTtBQUFFLGtCQUFNLEVBQUUsR0FBRyxNQUFNLFFBQVEsY0FBYyxDQUFDO0FBQUEsVUFBRztBQUFBLFVBQy9ELE1BQU0sTUFBTTtBQUFFLG1CQUFPLEtBQUssS0FBSyxTQUFTO0FBQUEsVUFBRztBQUFBLFVBQzNDLE1BQU0sSUFBSSxHQUFHO0FBQUUsbUJBQU8sS0FBSyxNQUFNLFdBQVcsQ0FBQztBQUFBLFVBQUc7QUFBQSxVQUNoRCxNQUFNLE9BQU8sT0FBTztBQUNoQixrQkFBTSxPQUFRLE1BQU0sS0FBSyxJQUFJLEtBQU0sQ0FBQztBQUNwQyxtQkFBTyxLQUFLLE1BQU0sV0FBVyxFQUFFLEdBQUcsTUFBTSxHQUFHLE9BQU8sWUFBWSxLQUFLLElBQUksRUFBRSxDQUFDO0FBQUEsVUFDOUU7QUFBQSxVQUNBLE1BQU0sUUFBUTtBQUFFLG1CQUFPLEtBQUssT0FBTyxTQUFTO0FBQUEsVUFBRztBQUFBLFFBQ25EO0FBQ0Esb0JBQVksSUFBSSxTQUFTLFNBQVM7QUFDbEMsb0JBQVk7QUFBQSxNQUNoQjtBQUNBLGFBQU87QUFBQSxJQUNYO0FBR0EsbUJBQWUsY0FBYyxLQUFLO0FBQzlCLFVBQUk7QUFBRSxlQUFPLE1BQU0sSUFBSTtBQUFBLE1BQUcsU0FDbkIsS0FBSztBQUNSLGNBQU0sU0FBUyxLQUFLLFdBQVcsY0FBYyxLQUFLLEtBQUssV0FBVyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUM7QUFDOUUsWUFBSSxDQUFDLFdBQVcsS0FBSztBQUFFLGdCQUFNLEdBQUcsS0FBSyxLQUFLLE9BQU87QUFBRyxpQkFBTyxNQUFNLElBQUk7QUFBQSxRQUFHO0FBQ3hFLGNBQU07QUFBQSxNQUNWO0FBQUEsSUFDSjtBQUNBLG1CQUFlLG9CQUFvQjtBQUMvQixVQUFJO0FBQUUsWUFBSSxNQUFNLEdBQUcsS0FBSyxLQUFLLE9BQU8sRUFBRyxRQUFPO0FBQUEsTUFBTSxRQUFRO0FBQUEsTUFBRTtBQUM5RCxjQUFRLFFBQVEsZ0RBQWdELE1BQU07QUFDdEUsYUFBTztBQUFBLElBQ1g7QUFHQSxtQkFBZSxjQUFjLEtBQUssRUFBRSxZQUFZLEtBQU8sU0FBUyxJQUFJLElBQUksQ0FBQyxHQUFHO0FBQ3hFLFlBQU0sS0FBSyxLQUFLLElBQUk7QUFDcEIsYUFBTyxLQUFLLElBQUksSUFBSSxLQUFLLFdBQVc7QUFDaEMsWUFBSSxTQUFTLGNBQWMsR0FBRyxFQUFHLFFBQU87QUFDeEMsY0FBTSxRQUFRLE1BQU0sTUFBTTtBQUFBLE1BQzlCO0FBQ0EsYUFBTyxDQUFDLENBQUMsU0FBUyxjQUFjLEdBQUc7QUFBQSxJQUN2QztBQUdBLFFBQUksU0FBUyxPQUFPLFVBQVUsT0FBTyxpQkFBaUIsTUFBTSxpQkFBaUI7QUFFN0UsbUJBQWUsWUFBWTtBQUN2QixVQUFJLFVBQVUsUUFBUztBQUN2QixnQkFBVTtBQUNWLFVBQUk7QUFDQSxZQUFJLENBQUMsUUFBUSxhQUFhLElBQUksTUFBTSxFQUFHO0FBQ3ZDLFlBQUksQ0FBRSxNQUFNLGNBQWMsSUFBSSxNQUFNLEVBQUk7QUFDeEMsWUFBSSxDQUFFLE1BQU0sa0JBQWtCLEVBQUk7QUFFbEMsY0FBTSxFQUFFLFlBQVksVUFBVSxJQUFJLE1BQU0sUUFBUSxrQkFBa0IsSUFBSSxRQUFRO0FBQUEsVUFDMUUsUUFBUTtBQUFBLFVBQUssV0FBVztBQUFBLFVBQU0sUUFBUSxjQUFjLElBQUk7QUFBQSxRQUM1RCxDQUFDO0FBQ0QsWUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFXO0FBSy9CLFlBQUksaUJBQWlCO0FBQ3JCLHlCQUFpQixRQUFRLGdCQUFnQjtBQUFBLFVBQ3JDLFVBQVUsSUFBSTtBQUFBO0FBQUEsVUFFZCxTQUFTLENBQUMsSUFBSSxpQkFBaUIsT0FBTztBQUFBLFVBQ3RDLFFBQVE7QUFBQSxVQUNSLFVBQVU7QUFBQSxVQUNWLFFBQVEsY0FBYyxJQUFJO0FBQUEsVUFDMUIsVUFBVSxZQUFZO0FBQ2xCLGtCQUFNLGFBQWEsUUFBUSxZQUFZLFdBQVcsY0FBYyxFQUFFLE9BQU8sTUFBTSxNQUFNLEtBQUssQ0FBQztBQUMzRixnQkFBSSxDQUFDLGNBQWMsZUFBZSxlQUFnQjtBQUNsRCw2QkFBaUI7QUFFakIsa0JBQU0sZ0JBQWdCLFdBQVc7QUFDakMsa0JBQU0sZ0JBQWdCLFlBQVksU0FBUztBQUFBLFVBQy9DO0FBQUEsUUFDSixDQUFDO0FBRUQsaUJBQVM7QUFBQSxNQUNiLFNBQVMsR0FBRztBQUNSLGlCQUFTO0FBQ1QsZUFBTyxHQUFHLElBQUksSUFBSSxpQkFBaUIsQ0FBQztBQUFBLE1BQ3hDLFVBQUU7QUFDRSxrQkFBVTtBQUFBLE1BQ2Q7QUFBQSxJQUNKO0FBR0EsbUJBQWUsZ0JBQWdCLFlBQVksSUFBSTtBQUMzQyxVQUFJLENBQUMsV0FBWTtBQUNqQixVQUFJO0FBRUEsY0FBTSxRQUFRLE1BQU07QUFBQSxVQUFjLE1BQzlCLEdBQUcsS0FBSyxLQUFLLE9BQU8sSUFBSSx3QkFBd0IsRUFBRSxhQUFhLFdBQVcsQ0FBQztBQUFBLFFBQy9FO0FBQ0EsY0FBTSxPQUFPLE1BQU0sUUFBUSxLQUFLLElBQUksTUFBTSxDQUFDLElBQUk7QUFDL0MsY0FBTSxhQUFhLE1BQU0sZUFBZTtBQUN4QyxZQUFJLENBQUMsWUFBWTtBQUFFLGtCQUFRLFFBQVEsK0JBQXFCLFVBQVUsSUFBSSxNQUFNO0FBQUc7QUFBQSxRQUFRO0FBR3ZGLGNBQU0sUUFBUSxNQUFNO0FBQUEsVUFBYyxNQUM5QixHQUFHLEtBQUssS0FBSyxPQUFPLElBQUksd0JBQXdCLEVBQUUsYUFBYSxXQUFXLENBQUM7QUFBQSxRQUMvRTtBQUNBLGNBQU0sZUFBZSxNQUFNLFFBQVEsS0FBSyxJQUFJLE1BQU0sSUFBSSxPQUFLLEdBQUcsWUFBWSxFQUFFLEtBQUssT0FBTyxJQUFJLFNBQVM7QUFHckcsZ0JBQVEsWUFBWSxJQUFJLGNBQWMsVUFBVTtBQUNoRCxnQkFBUSxZQUFZLElBQUksZUFBZSxXQUFXO0FBR2xELGNBQU0sT0FBTyxNQUFNLGdCQUFnQixXQUFXO0FBQzlDLGNBQU0sS0FBSyxPQUFPO0FBQUEsVUFDZCxhQUFhLE9BQU8sVUFBVTtBQUFBLFVBQzlCLGFBQWE7QUFBQSxVQUNiLGNBQWM7QUFBQSxVQUNkLG9CQUFvQixLQUFLLElBQUk7QUFBQSxRQUNqQyxDQUFDO0FBR0QsWUFBSSxJQUFJLGVBQWU7QUFDbkIsa0JBQVE7QUFBQSxZQUNKLG9CQUFlLFVBQVU7QUFBQSxjQUFpQixVQUFVO0FBQUEsZUFBa0IsV0FBVztBQUFBLFlBQ2pGO0FBQUEsVUFDSjtBQUFBLFFBQ0o7QUFBQSxNQUNKLFNBQVMsS0FBSztBQUNWLGdCQUFRLFFBQVEseUJBQW9CLEtBQUssV0FBVyxHQUFHLElBQUksT0FBTztBQUNsRSxlQUFPLEdBQUc7QUFBQSxNQUNkO0FBQUEsSUFDSjtBQUdBLHFCQUFpQixRQUFRLGNBQWMsTUFBTTtBQUN6QyxVQUFJLENBQUMsUUFBUSxhQUFhLElBQUksTUFBTSxHQUFHO0FBQ25DLFlBQUk7QUFBRSwyQkFBaUI7QUFBQSxRQUFHLFFBQVE7QUFBQSxRQUFFO0FBQ3BDLHlCQUFpQjtBQUFNLGlCQUFTO0FBQU8sa0JBQVU7QUFDakQ7QUFBQSxNQUNKO0FBQ0EsaUJBQVcsV0FBVyxDQUFDO0FBQUEsSUFDM0IsQ0FBQztBQUVELGVBQVcsV0FBVyxDQUFDO0FBR3ZCLFdBQU8sa0JBQWtCLFlBQVk7QUFDakMsWUFBTSxPQUFPLE1BQU0sZ0JBQWdCLFdBQVc7QUFDOUMsY0FBUSxNQUFNLHFCQUFnQixNQUFNLE1BQU0sSUFBSSxDQUFDO0FBQUEsSUFDbkQ7QUFBQSxFQUNKLEdBQUc7IiwKICAibmFtZXMiOiBbXQp9Cg==
