// ==UserScript==
// @name        QT10_DEV
// @namespace   https://github.com/AlphaGeek509/plex-tampermonkey-scripts
// @version     3.6.36
// @description DEV-only build; includes user-start gate
// @match       https://*.plex.com/*
// @match       https://*.on.plex.com/*
// @require  http://localhost:5000/lt-plex-auth.user.js
// @require  http://localhost:5000/lt-plex-tm-utils.user.js
// @require  http://localhost:5000/lt-data-core.user.js
// @require  http://localhost:5000/lt-core.user.js
// @grant       GM_registerMenuCommand
// @grant       GM_getValue
// @grant       GM_setValue
// @grant       GM_xmlHttpRequest
// @grant       unsafeWindow
// @connect     *.plex.com
// @run-at      document-idle
// @noframes
// ==/UserScript==

(() => {
  // src/quote-tracking/qt10-customerCatalogGet/qt10.index.js
  (function() {
    "use strict";
    const DEV = true ? true : !!(typeof globalThis !== "undefined" && globalThis.__TM_DEV__);
    const CFG = {
      NAME: "QT10",
      ROUTES: [/^\/SalesAndCRM\/QuoteWizard(?:\/|$)/i],
      // KO-bound anchor we wait for to ensure VM is ready
      ANCHOR: '[data-val-property-name="CustomerNo"]',
      // Data sources
      DS_CATALOG_BY_CUSTOMER: 319,
      DS_CATALOG_CODE_BY_KEY: 22696,
      // If true, don’t pre-fire on page load; wait for a real user edit
      GATE_USER_EDIT: true,
      // Toast happy path
      TOAST_SUCCESS: true
    };
    const IS_TEST_ENV = /test\.on\.plex\.com$/i.test(location.hostname);
    try {
      TMUtils.setDebug?.(IS_TEST_ENV);
    } catch {
    }
    const L = TMUtils.getLogger?.(CFG.NAME);
    const dlog = (...a) => {
      if (IS_TEST_ENV) L?.log?.(...a);
    };
    const derror = (...a) => {
      if (IS_TEST_ENV) L?.error?.(...a);
    };
    if (!CFG.ROUTES.some((rx) => rx.test(location.pathname))) return;
    function getTabScopeId(ns = "QT") {
      try {
        const k = `lt:${ns}:scopeId`;
        let v = sessionStorage.getItem(k);
        if (!v) {
          v = String(Math.floor(Math.random() * 2147483647));
          sessionStorage.setItem(k, v);
        }
        return Number(v);
      } catch {
        return Math.floor(Math.random() * 2147483647);
      }
    }
    const SCOPE_DRAFT = "draft";
    let QT = null;
    async function waitForDC(timeoutMs = 2e4) {
      const start = Date.now();
      while (Date.now() - start < timeoutMs) {
        const LT = typeof unsafeWindow !== "undefined" ? unsafeWindow.lt : window.lt;
        if (LT?.core?.data?.createDataContext) {
          if (LT.core.data.makeFlatScopedRepo) return LT.core.data;
        }
        await (TMUtils.sleep?.(50) || new Promise((r) => setTimeout(r, 50)));
      }
      throw new Error("DataCore not ready");
    }
    async function getQT() {
      if (QT) return QT;
      const DC = await waitForDC();
      if (!DC.makeFlatScopedRepo) {
        await (TMUtils.sleep?.(50) || new Promise((r) => setTimeout(r, 50)));
      }
      QT = DC.makeFlatScopedRepo({ ns: "QT", entity: "quote", legacyEntity: "QuoteHeader" });
      return QT;
    }
    let repoDraft = null;
    async function ensureDraftRepo() {
      try {
        if (repoDraft) return repoDraft;
        const DC = typeof unsafeWindow !== "undefined" ? unsafeWindow.lt?.core?.data : window.lt?.core?.data;
        if (!DC?.makeFlatScopedRepo) return null;
        const { use } = DC.makeFlatScopedRepo({ ns: "QT", entity: "quote", legacyEntity: "QuoteHeader" });
        const { repo } = use(getTabScopeId("QT"));
        repoDraft = repo;
        await repoDraft.ensureFromLegacyIfMissing?.();
        return repoDraft;
      } catch (e) {
        console.debug("QT10: repo not available yet; skipping persistence this cycle", e);
        return null;
      }
    }
    async function withFreshAuth(run) {
      try {
        return await run();
      } catch (err) {
        const status = err?.status || (/\b(\d{3})\b/.exec(err?.message || "") || [])[1];
        if (+status === 419) {
          await lt.core.auth.getKey();
          return await run();
        }
        throw err;
      }
    }
    async function ensureAuthOrToast() {
      try {
        if (await lt.core.auth.getKey()) return true;
      } catch {
      }
      TMUtils.toast?.("Sign-in required. Please log in, then retry.", "warn");
      return false;
    }
    async function anchorAppears(sel, { timeoutMs = 1e4, pollMs = 150 } = {}) {
      const t0 = Date.now();
      while (Date.now() - t0 < timeoutMs) {
        if (document.querySelector(sel)) return true;
        await (TMUtils.sleep?.(pollMs) || new Promise((r) => setTimeout(r, pollMs)));
      }
      return !!document.querySelector(sel);
    }
    let booted = false, booting = false, disposeWatcher = null, unsubscribeUrl = null;
    async function maybeBoot() {
      if (booted || booting) return;
      booting = true;
      try {
        if (!CFG.ROUTES.some((rx) => rx.test(location.pathname))) return;
        if (!await anchorAppears(CFG.ANCHOR)) return;
        if (!await ensureAuthOrToast()) return;
        const { viewModel } = await TMUtils.waitForModelAsync(CFG.ANCHOR, {
          pollMs: 200,
          timeoutMs: 8e3,
          logger: IS_TEST_ENV ? L : null
        });
        if (!viewModel) return;
        let lastCustomerNo = null;
        disposeWatcher = TMUtils.watchBySelector({
          selector: CFG.ANCHOR,
          // If user-gated, don’t fire an initial read; wait for real input
          initial: !CFG.GATE_USER_EDIT ? true : false,
          fireOn: "blur",
          settleMs: 350,
          logger: IS_TEST_ENV ? L : null,
          onChange: async () => {
            const customerNo = TMUtils.getObsValue(viewModel, "CustomerNo", { first: true, trim: true });
            if (!customerNo || customerNo === lastCustomerNo) return;
            lastCustomerNo = customerNo;
            await applyCatalogFor(customerNo, viewModel);
          }
        });
        booted = true;
      } catch (e) {
        booted = false;
        derror(`${CFG.NAME} init failed:`, e);
      } finally {
        booting = false;
      }
    }
    async function applyCatalogFor(customerNo, vm) {
      if (!customerNo) return;
      try {
        const rows1 = await withFreshAuth(
          () => lt.core.plex.dsRows(CFG.DS_CATALOG_BY_CUSTOMER, { Customer_No: customerNo })
        );
        const row1 = Array.isArray(rows1) ? rows1[0] : null;
        const catalogKey = row1?.Catalog_Key || 0;
        if (!catalogKey) {
          TMUtils.toast?.(`\u26A0\uFE0F No catalog for ${customerNo}`, "warn");
          return;
        }
        const rows2 = await withFreshAuth(
          () => lt.core.plex.dsRows(CFG.DS_CATALOG_CODE_BY_KEY, { Catalog_Key: catalogKey })
        );
        const catalogCode = (Array.isArray(rows2) ? rows2.map((r) => r?.Catalog_Code).find(Boolean) : null) || "";
        TMUtils.setObsValue(vm, "CatalogKey", catalogKey);
        TMUtils.setObsValue(vm, "CatalogCode", catalogCode);
        const repo = await ensureDraftRepo();
        if (repo) {
          persistDraftHeaderWithRetry({
            Customer_No: String(customerNo),
            Catalog_Key: Number(catalogKey),
            Catalog_Code: String(catalogCode || ""),
            Catalog_Fetched_At: Date.now()
          });
        }
        if (CFG.TOAST_SUCCESS) {
          TMUtils.toast?.(
            `\u2705 Customer: ${customerNo}
CatalogKey: ${catalogKey}
CatalogCode: ${catalogCode}`,
            "success"
          );
        }
      } catch (err) {
        TMUtils.toast?.(`\u274C Lookup failed: ${err?.message || err}`, "error");
        derror(err);
      }
    }
    const __QT10_PERSIST = { queue: null, timer: null };
    async function persistDraftHeaderWithRetry(patch, maxTries = 120, intervalMs = 250) {
      try {
        const repo = await ensureDraftRepo();
        if (repo) {
          await repo.patchHeader(patch);
          return true;
        }
      } catch (e) {
        console.debug("QT10: repo not ready now, will retry", e);
      }
      __QT10_PERSIST.queue = { ...__QT10_PERSIST.queue || {}, ...patch };
      if (__QT10_PERSIST.timer) return false;
      let triesLeft = maxTries;
      __QT10_PERSIST.timer = setInterval(async () => {
        try {
          const repoLater = await ensureDraftRepo();
          if (!repoLater) {
            if (--triesLeft <= 0) {
              clearInterval(__QT10_PERSIST.timer);
              __QT10_PERSIST.timer = null;
              console.debug("QT10: gave up persisting draft after retries");
            }
            return;
          }
          const payload = __QT10_PERSIST.queue;
          __QT10_PERSIST.queue = null;
          clearInterval(__QT10_PERSIST.timer);
          __QT10_PERSIST.timer = null;
          await repoLater.patchHeader(payload);
          console.debug("QT10: draft persisted after retry", payload);
        } catch (err) {
          console.warn("QT10: retry persist error", err);
        }
      }, intervalMs);
      return false;
    }
    unsubscribeUrl = TMUtils.onUrlChange?.(() => {
      if (!CFG.ROUTES.some((rx) => rx.test(location.pathname))) {
        try {
          disposeWatcher?.();
        } catch {
        }
        disposeWatcher = null;
        booted = false;
        booting = false;
        return;
      }
      setTimeout(maybeBoot, 0);
    });
    setTimeout(maybeBoot, 0);
    window.QT10_debugDraft = async () => {
      const repo = await ensureDraftRepo();
      console.debug("QT10 draft \u2192", await repo?.get());
    };
  })();
})();
//# sourceMappingURL=data:application/json;base64,
