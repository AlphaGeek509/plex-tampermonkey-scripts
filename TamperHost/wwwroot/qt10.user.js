// ==UserScript==
// @name        QT10_DEV
// @namespace   https://github.com/AlphaGeek509/plex-tampermonkey-scripts
// @version     3.6.9
// @description DEV-only build; includes user-start gate
// @match       https://*.plex.com/*
// @match       https://*.on.plex.com/*
// @require     http://localhost:5000/lt-plex-tm-utils.user.js
// @require     http://localhost:5000/lt-plex-auth.user.js
// @grant       GM_registerMenuCommand
// @grant       GM_getValue
// @grant       GM_setValue
// @grant       GM_xmlHttpRequest
// @grant       unsafeWindow
// @connect     *.plex.com
// @run-at      document-idle
// @noframes
// ==/UserScript==

(() => {
  // src/quote-tracking/CustomerCatalogGet/index.js
  var DEV = true ? true : !!(typeof globalThis !== "undefined" && globalThis.__TM_DEV__);
  (function() {
    "use strict";
    const CFG = {
      NAME: "QT10",
      ROUTES: [/^\/SalesAndCRM\/QuoteWizard(?:\/|$)/i],
      ANCHOR: '[data-val-property-name="CustomerNo"]',
      GATE_USER_EDIT: true,
      // wait for first *real* user edit before reacting
      TOAST_SUCCESS: true
      // show green toast when writes succeed
    };
    const IS_TEST_ENV = /test\.on\.plex\.com$/i.test(location.hostname);
    TMUtils.setDebug?.(IS_TEST_ENV);
    const L = TMUtils.getLogger?.(CFG.NAME);
    const dlog = (...a) => {
      if (IS_TEST_ENV) L?.log?.(...a);
    };
    const dwarn = (...a) => {
      if (IS_TEST_ENV) L?.warn?.(...a);
    };
    const derror = (...a) => {
      if (IS_TEST_ENV) L?.error?.(...a);
    };
    const toastDev = (msg, level = "info") => {
      const prefix = `[${CFG.NAME} DEV]`;
      if (TMUtils.toast) TMUtils.toast(`${prefix} ${msg}`, level);
      else (level === "error" ? console.error : level === "warn" ? console.warn : console.debug)(prefix, msg);
    };
    if (!TMUtils.matchRoute?.(CFG.ROUTES)) {
      dlog("Skipping route:", location.pathname);
      return;
    }
    async function withFreshAuth(run) {
      try {
        return await run();
      } catch (err) {
        const status = err?.status || (/\b(\d{3})\b/.exec(err?.message || "") || [])[1];
        if (+status === 419) {
          await TMUtils.getApiKey({ force: true });
          return await run();
        }
        throw err;
      }
    }
    async function ensureAuthOrToast() {
      try {
        const key = await TMUtils.getApiKey({ wait: true, timeoutMs: 3e3 });
        if (key) return true;
      } catch {
      }
      TMUtils.toast?.("Sign-in required. Please log in, then retry.", "warn");
      return false;
    }
    async function anchorAppears(sel, { timeoutMs = 5e3, pollMs = 150 } = {}) {
      const t0 = Date.now();
      while (Date.now() - t0 < timeoutMs) {
        if (document.querySelector(sel)) return true;
        await TMUtils.sleep(pollMs);
      }
      return !!document.querySelector(sel);
    }
    let booted = false;
    let booting = false;
    let disposeWatcher = null;
    let unsubscribeUrl = null;
    let gate = null;
    async function maybeBoot() {
      if (booted || booting) return;
      booting = true;
      try {
        if (!TMUtils.matchRoute?.(CFG.ROUTES)) {
          booting = false;
          return;
        }
        if (!await anchorAppears(CFG.ANCHOR, { timeoutMs: 2e3 })) {
          booting = false;
          return;
        }
        booted = true;
        if (!await ensureAuthOrToast()) {
          booting = false;
          return;
        }
        const { controller, viewModel } = await TMUtils.waitForModelAsync(CFG.ANCHOR, {
          pollMs: 200,
          timeoutMs: 8e3,
          logger: IS_TEST_ENV ? L : null
        });
        if (!controller || !viewModel) {
          booted = false;
          booting = false;
          return;
        }
        const QuoteNoStash = window.lt?.QT?.QuoteNoStash;
        const initialQuoteNo = TMUtils.getObsValue?.(viewModel, "QuoteNo", { first: true, trim: true });
        if (initialQuoteNo && QuoteNoStash) {
          QuoteNoStash.set(initialQuoteNo);
          dlog("QT10: stashed QuoteNo \u2192", initialQuoteNo);
        }
        TMUtils.watchKO?.(viewModel, "QuoteNo", (newVal) => {
          const v = TMUtils.unwrap?.(newVal) ?? newVal;
          if (v && QuoteNoStash) {
            QuoteNoStash.set(String(v).trim());
            dlog("QT10: updated QuoteNo \u2192", v);
          }
        });
        let lastCustomerNo = null;
        disposeWatcher = TMUtils.watchBySelector({
          selector: CFG.ANCHOR,
          initial: true,
          // fire once on init
          fireOn: "blur",
          // then on blur (tweak to taste)
          settleMs: 350,
          logger: IS_TEST_ENV ? L : null,
          onChange: () => {
            if (DEV && gate && !gate.isStarted()) {
              dlog(`${CFG.NAME}] change ignored until first user edit`);
              return;
            }
            const customerNo = TMUtils.getObsValue(viewModel, "CustomerNo", { first: true, trim: true });
            if (!customerNo || customerNo === lastCustomerNo) return;
            lastCustomerNo = customerNo;
            dlog(`${CFG.NAME}: CustomerNo \u2192`, customerNo);
            applyCatalogFor(customerNo, viewModel);
          }
        });
      } catch (e) {
        booted = false;
        derror(`${CFG.NAME} init failed:`, e);
      } finally {
        booting = false;
      }
    }
    async function applyCatalogFor(customerNo, vm) {
      if (!customerNo) return;
      try {
        const [row1] = await withFreshAuth(() => TMUtils.dsRows(319, { Customer_No: customerNo }));
        const catalogKey = row1?.Catalog_Key || 0;
        if (!catalogKey) {
          TMUtils.toast?.(`\u26A0\uFE0F No catalog for ${customerNo}`, "warn");
          return;
        }
        const rows2 = await withFreshAuth(() => TMUtils.dsRows(22696, { Catalog_Key: catalogKey }));
        const catalogCode = rows2.map((r) => r.Catalog_Code).find(Boolean) || "";
        TMUtils.setObsValue(vm, "CatalogKey", catalogKey);
        TMUtils.setObsValue(vm, "CatalogCode", catalogCode);
        if (CFG.TOAST_SUCCESS) {
          TMUtils.toast?.(
            `\u2705 Customer: ${customerNo}
CatalogKey: ${catalogKey}
CatalogCode: ${catalogCode}`,
            "success"
          );
        }
        dlog(`${CFG.NAME} done`, { customerNo, catalogKey, catalogCode });
      } catch (err) {
        TMUtils.toast?.(`\u274C Lookup failed: ${err?.message || err}`, "error");
        derror(err);
      }
    }
    unsubscribeUrl = TMUtils.onUrlChange?.(() => {
      if (!TMUtils.matchRoute?.(CFG.ROUTES)) {
        try {
          disposeWatcher?.();
        } catch {
        }
        disposeWatcher = null;
        gate = null;
        booted = false;
        booting = false;
        return;
      }
      setTimeout(maybeBoot, 0);
    });
    setTimeout(maybeBoot, 0);
  })();
})();
//# sourceMappingURL=data:application/json;base64,
