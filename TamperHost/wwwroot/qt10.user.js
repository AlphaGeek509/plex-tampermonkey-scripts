// ==UserScript==
// @name        QT10_DEV
// @namespace   https://github.com/AlphaGeek509/plex-tampermonkey-scripts
// @version     3.8.37
// @description DEV-only build; includes user-start gate
// @match       https://lyntron.on.plex.com/SalesAndCRM*
// @match       https://lyntron.on.plex.com/SalesAndCrm*
// @match       https://lyntron.test.on.plex.com/SalesAndCRM*
// @match       https://lyntron.test.on.plex.com/SalesAndCrm*
// @require      http://localhost:5000/lt-plex-tm-utils.user.js?v=3.8.37-1758668539276
// @require      http://localhost:5000/lt-plex-auth.user.js?v=3.8.37-1758668539276
// @require      http://localhost:5000/lt-ui-hub.js?v=3.8.37-1758668539276
// @require      http://localhost:5000/lt-data-core.user.js?v=3.8.37-1758668539276
// @require      http://localhost:5000/lt-core.user.js?v=3.8.37-1758668539276
// @resource     THEME_CSS http://localhost:5000/theme.css
// @grant       GM_registerMenuCommand
// @grant       GM_getValue
// @grant       GM_setValue
// @grant       GM_xmlhttpRequest
// @grant       unsafeWindow
// @connect     *.plex.com
// @run-at      document-start
// @noframes
// @grant        GM_addStyle
// @grant        GM_getResourceText
// @updateURL   http://localhost:5000/qt10.user.js
// @downloadURL http://localhost:5000/qt10.user.js
// ==/UserScript==

(() => {
  // src/quote-tracking/qt10-customerCatalogGet/qt10.index.js
  (async function() {
    "use strict";
    const DEV = true ? true : !!(typeof globalThis !== "undefined" && globalThis.__TM_DEV__);
    const CFG = {
      NAME: "QT10",
      ROUTES: [/^\/SalesAndCRM\/QuoteWizard(?:\/|$)/i],
      // KO-bound anchor we wait for to ensure VM is ready
      ANCHOR: '[data-val-property-name="CustomerNo"]',
      // Data sources
      DS_CATALOG_BY_CUSTOMER: 319,
      DS_CATALOG_CODE_BY_KEY: 22696,
      // If true, don’t pre-fire on page load; wait for a real user edit
      GATE_USER_EDIT: true
    };
    const IS_TEST_ENV = /test\.on\.plex\.com$/i.test(location.hostname);
    try {
      TMUtils.setDebug?.(IS_TEST_ENV);
    } catch {
    }
    const L = TMUtils.getLogger?.(CFG.NAME);
    const dlog = (...a) => {
      if (IS_TEST_ENV) L?.log?.(...a);
    };
    const derror = (...a) => {
      if (IS_TEST_ENV) L?.error?.(...a);
    };
    if (!CFG.ROUTES.some((rx) => rx.test(location.pathname))) return;
    window.__LT_HUB_MOUNT = "nav";
    await window.ensureLTHub?.({ mount: "nav" });
    lt.core.hub.notify("Ready", "info", { sticky: true });
    function getTabScopeId(ns = "QT") {
      try {
        const NEW = `lt:${ns}:__scopeId`;
        const OLD = `lt:${ns}:scopeId`;
        let v = sessionStorage.getItem(NEW) || sessionStorage.getItem(OLD);
        if (!v) {
          v = String(Math.floor(Math.random() * 2147483647));
        }
        try {
          sessionStorage.setItem(NEW, v);
          sessionStorage.removeItem(OLD);
        } catch {
        }
        return Number(v);
      } catch {
        return Math.floor(Math.random() * 2147483647);
      }
    }
    const SCOPE_DRAFT = "draft";
    let QT = null;
    const QTF = lt.core?.data?.makeFlatScopedRepo ? lt.core.data.makeFlatScopedRepo({ ns: "QT", entity: "quote", legacyEntity: "QuoteHeader" }) : null;
    let repoDraft = null;
    async function ensureDraftRepo() {
      if (repoDraft) return repoDraft;
      const coreRepo = await lt?.core?.qt?.useDraftRepo?.();
      if (coreRepo) {
        repoDraft = coreRepo;
        return repoDraft;
      }
      if (!QTF) return null;
      const { repo } = QTF.use(getTabScopeId("QT"));
      repoDraft = repo;
      await repoDraft.ensureFromLegacyIfMissing?.();
      return repoDraft;
    }
    const withFreshAuth = (fn) => {
      const impl = lt?.core?.auth?.withFreshAuth;
      return typeof impl === "function" ? impl(fn) : fn();
    };
    async function ensureAuthOrToast() {
      try {
        if (await lt.core.auth.getKey()) return true;
      } catch {
      }
      lt.core.hub.notify("Auth looks stale. Retrying\u2026", "warn", { toast: true });
      return false;
    }
    async function anchorAppears(sel, { timeoutMs = 1e4, pollMs = 150 } = {}) {
      const t0 = Date.now();
      while (Date.now() - t0 < timeoutMs) {
        if (document.querySelector(sel)) return true;
        await (TMUtils.sleep?.(pollMs) || new Promise((r) => setTimeout(r, pollMs)));
      }
      return !!document.querySelector(sel);
    }
    let booted = false, booting = false, disposeWatcher = null, unsubscribeUrl = null;
    async function maybeBoot() {
      if (booted || booting) return;
      booting = true;
      try {
        if (!CFG.ROUTES.some((rx) => rx.test(location.pathname))) return;
        if (!await anchorAppears(CFG.ANCHOR)) return;
        if (!await ensureAuthOrToast()) return;
        const { viewModel } = await TMUtils.waitForModelAsync(CFG.ANCHOR, {
          pollMs: 200,
          timeoutMs: 8e3,
          logger: IS_TEST_ENV ? L : null
        });
        if (!viewModel) return;
        let lastCustomerNo = null;
        disposeWatcher = TMUtils.watchBySelector({
          selector: CFG.ANCHOR,
          // If user-gated, don’t fire an initial read; wait for real input
          initial: !CFG.GATE_USER_EDIT ? true : false,
          fireOn: "blur",
          settleMs: 350,
          logger: IS_TEST_ENV ? L : null,
          onChange: async () => {
            const customerNo = TMUtils.getObsValue(viewModel, "CustomerNo", { first: true, trim: true });
            if (!customerNo || customerNo === lastCustomerNo) return;
            lastCustomerNo = customerNo;
            await applyCatalogFor(customerNo, viewModel);
          }
        });
        booted = true;
      } catch (e) {
        booted = false;
        derror(`${CFG.NAME} init failed:`, e);
      } finally {
        booting = false;
      }
    }
    async function applyCatalogFor(customerNo, vm) {
      if (!customerNo) return;
      const task = lt.core.hub.beginTask("Linking catalog\u2026", "info");
      try {
        const rows1 = await withFreshAuth(
          () => lt.core.plex.dsRows(CFG.DS_CATALOG_BY_CUSTOMER, { Customer_No: customerNo })
        );
        const row1 = Array.isArray(rows1) ? rows1[0] : null;
        const catalogKey = row1?.Catalog_Key || 0;
        if (!catalogKey) {
          task.error("No catalog found for this customer.");
          return;
        }
        const rows2 = await withFreshAuth(
          () => lt.core.plex.dsRows(CFG.DS_CATALOG_CODE_BY_KEY, { Catalog_Key: catalogKey })
        );
        const catalogCode = (Array.isArray(rows2) ? rows2.map((r) => r?.Catalog_Code).find(Boolean) : null) || "";
        TMUtils.setObsValue(vm, "CatalogKey", catalogKey);
        TMUtils.setObsValue(vm, "CatalogCode", catalogCode);
        const repo = await ensureDraftRepo();
        if (repo) {
          persistDraftHeaderWithRetry({
            Customer_No: String(customerNo),
            Catalog_Key: Number(catalogKey),
            Catalog_Code: String(catalogCode || ""),
            Catalog_Fetched_At: Date.now(),
            Updated_At: Date.now()
          });
        }
        const codeTrimmed = typeof catalogCode === "string" ? catalogCode.trim() : "";
        const display = codeTrimmed || String(catalogKey ?? "");
        const msg = codeTrimmed ? `Linked: ${codeTrimmed} (key ${catalogKey})` : `Linked: key ${catalogKey}`;
        task.success(msg);
        lt.core.hub.notify(msg, "success", { ms: 3e3 });
      } catch (err) {
        task.error("No catalog found for this customer.");
        derror(err);
      }
    }
    const __QT10_PERSIST = { queue: null, timer: null };
    async function persistDraftHeaderWithRetry(patch, maxTries = 120, intervalMs = 250) {
      const promoteNow = (mode) => {
        try {
          const ctx = lt?.core?.qt?.getQuoteContext?.();
          const qk = Number(ctx?.quoteKey || 0);
          if (qk > 0) lt.core.qt.promoteDraftToQuote?.({ qk, strategy: mode });
        } catch {
        }
      };
      try {
        const repo = await ensureDraftRepo();
        if (repo) {
          await repo.patchHeader(patch);
          promoteNow("once");
          return true;
        }
      } catch (e) {
        console.debug("QT10: repo not ready now, will retry", e);
      }
      __QT10_PERSIST.queue = { ...__QT10_PERSIST.queue || {}, ...patch };
      if (__QT10_PERSIST.timer) return false;
      let triesLeft = maxTries;
      __QT10_PERSIST.timer = setInterval(async () => {
        try {
          const repoLater = await ensureDraftRepo();
          if (!repoLater) {
            if (--triesLeft <= 0) {
              clearInterval(__QT10_PERSIST.timer);
              __QT10_PERSIST.timer = null;
              console.warn("QT10: repo never became ready; gave up after retries");
            }
            return;
          }
          const payload = __QT10_PERSIST.queue;
          __QT10_PERSIST.queue = null;
          clearInterval(__QT10_PERSIST.timer);
          __QT10_PERSIST.timer = null;
          await repoLater.patchHeader(payload);
          console.debug("QT10: draft persisted after retry", payload);
          promoteNow("retry");
        } catch (err) {
          console.warn("QT10: retry persist error", err);
        }
      }, intervalMs);
      return false;
    }
    unsubscribeUrl = TMUtils.onUrlChange?.(() => {
      if (!CFG.ROUTES.some((rx) => rx.test(location.pathname))) {
        try {
          disposeWatcher?.();
        } catch {
        }
        disposeWatcher = null;
        booted = false;
        booting = false;
        return;
      }
      setTimeout(maybeBoot, 0);
    });
    setTimeout(maybeBoot, 0);
    const W = typeof unsafeWindow !== "undefined" ? unsafeWindow : window;
    W.QT10_debugDraft = async () => {
      const repo = await ensureDraftRepo();
      const snap = await repo?.get();
      console.debug("QT10 draft \u2192", snap);
      return snap;
    };
    W.QT10_forceDraft = async (patch = {}) => {
      const repo = await ensureDraftRepo();
      if (!repo) {
        console.warn("QT10: repo not ready");
        return null;
      }
      await repo.patchHeader({
        Customer_No: "TEST",
        Catalog_Key: 99999,
        Catalog_Code: "TestCatalog",
        Updated_At: Date.now(),
        ...patch
      });
      return await repo.get();
    };
    W.QT10_checkDC = () => !!lt?.core?.data?.makeFlatScopedRepo;
    W.QT10_dcStatus = () => {
      const hasFactory = !!lt?.core?.data?.makeFlatScopedRepo;
      return { hasCore: hasFactory, hasFactory };
    };
  })();
})();
//# sourceMappingURL=data:application/json;base64,
